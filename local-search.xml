<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>electron学习笔记</title>
    <link href="/2024/12/19/electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/12/19/electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="electron学习笔记"><a href="#electron学习笔记" class="headerlink" title="electron学习笔记"></a>electron学习笔记</h2><h3 id="1-npm-init"><a href="#1-npm-init" class="headerlink" title="1.npm init"></a>1.npm init</h3><p>创建文件夹并初始化</p><h3 id="2-安装electron并修改启动命令"><a href="#2-安装electron并修改启动命令" class="headerlink" title="2.安装electron并修改启动命令"></a>2.安装electron并修改启动命令</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> <span class="hljs-comment">--dev electron</span><br></code></pre></td></tr></table></figure><p>![image-20241219224414472](/Users/haopeixian/Library/Application Support/typora-user-images/image-20241219224414472.png)</p><h3 id="3-编辑入口文件main-js"><a href="#3-编辑入口文件main-js" class="headerlink" title="3.编辑入口文件main.js"></a>3.编辑入口文件main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; app, <span class="hljs-title class_">BrowserWindow</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;electron&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWindow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//初始化窗口的配置</span><br>    <span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">1200</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>,<br>        <span class="hljs-attr">autoHideMenuBarL</span>: <span class="hljs-literal">true</span><br>    &#125;);<br>    <span class="hljs-comment">//加载文件或网址</span><br>    <span class="hljs-comment">// win.loadFile(&quot;./index.html&quot;)</span><br>    win.<span class="hljs-title function_">loadURL</span>(<span class="hljs-string">&quot;https://ph2498.github.io/&quot;</span>)<br>&#125;<br><span class="hljs-comment">//开启窗口 </span><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;ready&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">createWindow</span>();<br>    app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;activate&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">getAllWindows</span>().<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-title function_">createWindow</span>()<br>    &#125;)<br>&#125;)<br><span class="hljs-comment">//关闭窗口</span><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) app.<span class="hljs-title function_">quit</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-配置自动重启-安装nodemon依赖包"><a href="#4-配置自动重启-安装nodemon依赖包" class="headerlink" title="4.配置自动重启(安装nodemon依赖包)"></a>4.配置自动重启(安装nodemon依赖包)</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i nodemon -d<br></code></pre></td></tr></table></figure><p>安装完成以后修改启动命令</p><p>![image-20241223225145332](/Users/haopeixian/Library/Application Support/typora-user-images/image-20241223225145332.png)</p><p>注意本地项目必须有安装依赖![image-20241223230029281](/Users/haopeixian/Library/Application Support/typora-user-images/image-20241223230029281.png)</p><p>修改任何文件都会触发nodemon的执行，Nodemon.json配置文件（与package.json同级）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br><span class="hljs-regexp">//</span>忽略<br>    <span class="hljs-string">&quot;ignore&quot;</span>:[<br>        <span class="hljs-string">&quot;node_modules&quot;</span>,<br>        <span class="hljs-string">&quot;dist&quot;</span><br>    ],<br>    <span class="hljs-regexp">//</span>在终端上执行nodemon命令的快捷键<br>    <span class="hljs-string">&quot;restartable&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>,<br>    <span class="hljs-regexp">//</span>监听所有文件<br>    <span class="hljs-string">&quot;watch&quot;</span>:[<span class="hljs-string">&quot;*.*&quot;</span>],<br>    <span class="hljs-string">&quot;ext&quot;</span>:<span class="hljs-string">&quot;html,js,css&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-预加载脚本preload-js"><a href="#5-预加载脚本preload-js" class="headerlink" title="5.预加载脚本preload.js"></a>5.预加载脚本preload.js</h3><p>（可以使用部分nodeJS的api）在根目录下，并且需要在主进程main.js中引入</p><p>![image-20241224225502519](/Users/haopeixian/Library/Application Support/typora-user-images/image-20241224225502519.png)</p><p>执行顺序：主进程-》预加载脚本-〉渲染脚本</p><p>Preload.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入桥接器</span><br><span class="hljs-keyword">const</span> &#123; contextBridge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;electron&quot;</span>);<br><span class="hljs-comment">//讲参数abc透传到渲染进程的window对象上</span><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&quot;abc&quot;</span>,&#123;<br>    <span class="hljs-attr">xyz</span>:<span class="hljs-number">123</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="6-进程通信（单项子传父）"><a href="#6-进程通信（单项子传父）" class="headerlink" title="6.进程通信（单项子传父）"></a>6.进程通信（单项子传父）</h3><p>预加载脚本send==&gt;主进程on</p><ul><li>页面js（渲染进程）</li><li>preload.js（预加载脚本）</li><li>Main.js（主进程）</li></ul><p>流程：渲染进程==&gt;预加载脚本（ipcRenderer函数建立send与主进程的链接）==&gt;主进程（ipcMain函数on接受链接）<br>![image-20241228223157522](/Users/haopeixian/Library/Application Support/typora-user-images/image-20241228223157522.png)</p><h3 id="7-进程通信（双向）"><a href="#7-进程通信（双向）" class="headerlink" title="7.进程通信（双向）"></a>7.进程通信（双向）</h3><p>预加载脚本invoke==&gt;主进程handle</p><ul><li>页面js（渲染进程）</li><li>preload.js（预加载脚本）  </li><li>Main.js（主进程）</li></ul><p>流程：渲染进程（invoke返回一个promise）==&gt;预加载脚本（invoke）==&gt;主进程（handle）</p><p>![image-20241228225041631](/Users/haopeixian/Library/Application Support/typora-user-images/image-20241228225041631.png)</p><p>8.主进程通信渲染进程</p><p>与6.类似，改为主进程send,预加载脚本on</p><p>场景：可能应用有多个窗口，渲染进程和渲染进程没办法通信，那么可以通过主进程(main.js)来中转</p><p>主进程send==&gt;预加载脚本on</p><ul><li>页面js（渲染进程）</li><li>preload.js（预加载脚本）  </li><li>Main.js（主进程）</li></ul><p>流程：渲染进程（window）&lt;==预加载脚本（on）&lt;==主进程（send）</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p><strong>以上教程为原生写法，组件化推荐使用electron-vite脚手架</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端入门</title>
    <link href="/2022/08/07/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/"/>
    <url>/2022/08/07/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前端入门"><a href="#前端入门" class="headerlink" title="前端入门"></a>前端入门</h2><h3 id="1-弹性盒布局css"><a href="#1-弹性盒布局css" class="headerlink" title="1.弹性盒布局css"></a>1.弹性盒布局css</h3><pre><code class="hljs">display：flex；当前元素下的子元素一行显示；justify-content：space-between; 子元素向两侧弹开；                            left；子元素从左向右分布；                            flex-end;子元素从右向左分布；flex-wrap:wrap; 子元素超出父元素的宽度时自动换行；align-items:center; 子元素垂直居中；flex-direction:column; 弹性盒纵轴排列；</code></pre><h3 id="2-基础页面开发"><a href="#2-基础页面开发" class="headerlink" title="2.基础页面开发"></a>2.基础页面开发</h3><p>​    单个页面开发规范<br>​        文件目录src/pages/当前页面<br>​        文件 index.tsx、index.less<br>​    需要拆分组件规范<br>​        文件目录src/pages/当前页面<br>​        文件 index.tsx、index.less<br>​        组件文件目录src/pages/当前页面/components/组件名<br>​        文件 index.tsx、index.less<br>页面模版：<br>​        </p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//src/pages/当前页面/index.tsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./index.less&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">PageIndex</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.Box&#125;</span>&gt;</span></span><br><span class="language-xml">  ……</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-title class_">Default</span> <span class="hljs-title class_">PageIndex</span>;<br><br><span class="hljs-comment">//src/pages/当前页面/index.less</span><br>.<span class="hljs-property">Box</span>&#123;<br><span class="hljs-attr">width</span>:<span class="hljs-number">100</span>%;<br><span class="hljs-attr">height</span>:<span class="hljs-number">100</span>%;<br><span class="hljs-attr">background</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="React-Hooks钩子函数"><a href="#React-Hooks钩子函数" class="headerlink" title="React Hooks钩子函数"></a>React Hooks钩子函数</h4><p>react中钩子函数需要从react中结构。<br>在前端页面开发中常用的钩子函数主要有以下几个</p><p>​    1.useState  声明页面所需变量</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//   变量名   修改参数的方法        初始值</span><br><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//案例点击按钮修改count变量</span><br>&lt;<span class="hljs-title class_">Button</span> onClick=<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-title function_">setCount</span>(<span class="hljs-number">2</span>)<br>&#125;&gt;按钮&lt;/<span class="hljs-title class_">Button</span>&gt;<br></code></pre></td></tr></table></figure><p>2.useEffect 监听依赖值</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//每次修改都会触发</span><br>&#125;)<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//首次渲染会触发</span><br>&#125;, [])<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//依赖值变化会触发</span><br>&#125;, [依赖值])<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>  <span class="hljs-comment">//unmount会触发</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>3.useRef 获取Dom节点</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> rdom = <span class="hljs-title function_">useRef</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>&lt;div className=<span class="hljs-string">&quot;App&quot;</span> ref=&#123;rdom&#125;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="根据数据渲染页面"><a href="#根据数据渲染页面" class="headerlink" title="根据数据渲染页面"></a>根据数据渲染页面</h4><p>根据接口中获取的数据遍历渲染页面</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//案例数据</span><br><span class="hljs-keyword">const</span> data=[<span class="hljs-string">&quot;这是一句话&quot;</span>,<span class="hljs-string">&quot;这是第二句&quot;</span>]<br><span class="hljs-comment">//tsx在标签中渲染数据需要用到js中map方法，因为map方法有返回值（可以return 每一项）。</span><br>&lt;div&gt;<br>&#123;<br><span class="hljs-comment">//map函数的第一个参数item为数组中的每一项，第二个参数index为每一项的下标</span><br>data.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&#125;)<br>&#125;<br>&lt;/div&gt;<br><br><span class="hljs-comment">//数据为对象时</span><br><span class="hljs-keyword">const</span> obj=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br><span class="hljs-attr">country</span>:<span class="hljs-string">&quot;China&quot;</span><br>&#125;<br><span class="hljs-comment">//这里则需要用到Object.keys方法遍历对象,此方法会返回一个有当前对象所有key组成的数组</span><br><span class="hljs-comment">//Object.keys(obj).map((item,index)=&gt;&#123;</span><br><span class="hljs-keyword">return</span> item <span class="hljs-comment">//此处item会输出 name、age、country</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-antd组件库的使用"><a href="#3-antd组件库的使用" class="headerlink" title="3.antd组件库的使用"></a>3.antd组件库的使用</h3><p>在bigfish框架中集成了antd组件库可以直接在页面引入即可。</p><h4 id="1-Form表单组件"><a href="#1-Form表单组件" class="headerlink" title="1.Form表单组件"></a>1.Form表单组件</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//antd中的form提供了很多api，这里展示集中常用的方法</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Form</span>,<span class="hljs-title class_">Input</span>,<span class="hljs-title class_">Select</span>,<span class="hljs-title class_">Button</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br><span class="hljs-comment">//第一步声明form事例</span><br><span class="hljs-keyword">const</span> [form]=<span class="hljs-title class_">Form</span>.<span class="hljs-title function_">useForm</span>();<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">//将form事例绑定到标签上</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">form</span>=<span class="hljs-string">&#123;form&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form.Item</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;名称&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        //是否必填。     //错误提示</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">rules</span>=<span class="hljs-string">&#123;[&#123;</span> <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span>, <span class="hljs-attr">message:</span> &#x27;<span class="hljs-attr">Please</span> <span class="hljs-attr">input</span> <span class="hljs-attr">your</span> <span class="hljs-attr">username</span>!&#x27; &#125;]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Form.Item</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Form.Item</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;类型&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">rules</span>=<span class="hljs-string">&#123;[&#123;</span> <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span>, <span class="hljs-attr">message:</span> &#x27;<span class="hljs-attr">Please</span> <span class="hljs-attr">input</span> <span class="hljs-attr">your</span> <span class="hljs-attr">password</span>!&#x27; &#125;]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Select</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Select.Option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">Select.Option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Form.Item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Form.Item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;</span><br><span class="language-xml">//通过form事例获取表单内容</span><br><span class="language-xml">            const data=form.getFieldValue();</span><br><span class="language-xml">        //返回&#123;</span><br><span class="language-xml">        //  name:内容,</span><br><span class="language-xml">        //  type:内容</span><br><span class="language-xml">        //&#125;</span><br><span class="language-xml">&#125;&#125;&gt;提交<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Form.Item</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Table-表格组件"><a href="#2-Table-表格组件" class="headerlink" title="2.Table 表格组件"></a>2.Table 表格组件</h4><p>表格组件需要配置表头columns和传入data</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//展示数据</span><br><span class="hljs-keyword">const</span> dataSource = [<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;胡彦斌&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">32</span>,<br>    <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;西湖区湖底公园1号&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;2&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;胡彦祖&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">42</span>,<br>    <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;西湖区湖底公园1号&#x27;</span>,<br>  &#125;,<br>];<br><span class="hljs-comment">//表头</span><br><span class="hljs-keyword">const</span> columns = [<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    <span class="hljs-attr">render</span>:<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-comment">//render函数可以渲染html标签</span><br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;age&#x27;</span>,<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;age&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;住址&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;address&#x27;</span>,<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;address&#x27;</span>,<br>  &#125;,<br>];<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Table</span> <span class="hljs-attr">dataSource</span>=<span class="hljs-string">&#123;dataSource&#125;</span> <span class="hljs-attr">columns</span>=<span class="hljs-string">&#123;columns&#125;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p>未完待续……</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VUE前端优化</title>
    <link href="/2022/05/30/vue%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    <url>/2022/05/30/vue%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="分层滚动"><a href="#分层滚动" class="headerlink" title="分层滚动"></a>分层滚动</h1><p>功能：上层盒子比下层盒子滚动速度要慢</p><p>实现原理：将图片和图片下的信息都进行 position:relative 定位，监听滚动条的高度给图片设置滚动条高度的一半</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot; @scroll=&quot;gun&quot;&gt;<br>    &lt;img<br>      class=&quot;oimg&quot;<br>      :style=&quot;&#123;top:stop&#125;&quot;<br>      alt=&quot;&quot;<br>    &gt;<br>    &lt;div class=&quot;box&quot;&gt;<br>    下面的盒子<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      stop: 0,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    gun(e) &#123;<br>      this.stop=e.target.scrollTop/2+&quot;px&quot;;<br>      console.log(this.stop,e.target.scrollTop)<br>    &#125;,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br>&lt;/script&gt;<br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.home &#123;<br>  width: 100%;<br>  height: 100%;<br>  overflow-y: auto;<br>&#125;<br>.oimg &#123;<br>  width: 100%;<br>  position: relative;<br>  top:0;<br>&#125;<br>.box &#123;<br>  width: 100%;<br>  height: 800px;<br>  background: pink;<br>  position: relative;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="虚拟队列"><a href="#虚拟队列" class="headerlink" title="虚拟队列"></a>虚拟队列</h1><p>功能：进入下一层页面是加载，返回上一个页面时使用 keep-alive 缓存</p><p>实现原理:keep-alive</p><p>在最外层用:keep-alive 包裹,准备一个虚拟队列，如果虚拟队列有当前路由的 name 则使用缓存</p><p>每一个页面都得加 name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;layout&quot;&gt;<br>    layout<br>    &lt;keep-alive :include=&quot;activeList&quot;<br>      &gt;&lt;!-- 看看缓存队列里是否存在当前路由的name --&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>    &lt;/keep-alive&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      activeList: [&#x27;home&#x27;], //准备一个虚拟队列<br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    $route(to) &#123;<br>      //监听路由<br>      let pushType = to.query.routeType //获取路由的routeType的值（每次跳转下一页都会带个routeType=push，用来辨别是下一步的操作）<br>      if (pushType == &#x27;push&#x27;) &#123;<br>        //点击了下一步<br>        this.activeList.push(to.name) //将这个路由加入虚拟队列<br>      &#125; else &#123;<br>        this.activeList.pop() //将最后一个从虚拟队列删除<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h1><p>功能：左右两边的 dl 高度不一，形似瀑布 案例：淘宝商品推荐</p><p>实现原理：将所有 dl 根据父级盒子定位</p><p>所用数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">data() &#123; return &#123; shopList: [], //所有商品 MAX_height: 255, //最大高度<br>Min_height: 200, styleList: [],//样式列表 heightList: [],//每张图片的高度<br>shopHeight: 0,//列表盒子的高度 &#125; &#125;,<br></code></pre></td></tr></table></figure><p>定义一个生成图片随机高度的函数返回一个数组，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">getAllHeight() &#123;//图片大小生成 this.shopList.forEach(()=&gt;&#123;<br>this.heightList.push(Math.floor(Math.random()*(this.MAX_height-this.Min_height-1)+this.Min_height)+&quot;px&quot;)<br>&#125;) &#125;,<br></code></pre></td></tr></table></figure><p>将每一张图片的高度设置；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;img src=&quot;@/img/1.png&quot; alt=&quot;&quot; :style=&quot;&#123; height: heightList[index] &#125;&quot; /&gt;<br></code></pre></td></tr></table></figure><p>定义一个定位函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">setStyle()&#123; let leftHeight=0;//dl距离盒子左侧顶部的高度 let<br>rightHeight=0;//dl距离盒子右侧顶部的高度 let omargin=30;//dl之间的margin<br>this.$refs.idl.forEach(item=&gt;&#123;//遍历每一个dl let ostyle=&#123;&#125;//准备一个样式对象<br>if(leftHeight&lt;=rightHeight)&#123;//左边顶部的高&lt;=右边顶部的高 ostyle=&#123;//顶位到左边<br>top:leftHeight+omargin+&quot;px&quot;, left:&quot;0&quot; &#125;<br>leftHeight+=item.clientHeight*1+omargin//重新计算顶部的高度 &#125;else&#123;<br>ostyle=&#123;//顶位到右边 top:rightHeight+omargin+&quot;px&quot;, right:&quot;0&quot; &#125;<br>rightHeight+=item.clientHeight*1+omargin//重新计算高度 &#125;<br>this.shopHeight=leftHeight?leftHeight+&quot;px&quot;:rightHeight+&quot;px&quot;//重新计算父元素的高低<br>this.styleList.push(ostyle);//将每一个dl的样式加入样式数组 &#125;) &#125;<br></code></pre></td></tr></table></figure><p>在遍历 dl 的时候给每一个 dl 设置定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;dl<br>  v-for=&quot;(item, index) in shopList&quot;<br>  :key=&quot;item.id&quot;<br>  ref=&quot;idl&quot;<br>  :style=&quot;styleList[index]&quot;<br>&gt;<br>          &lt;dt&gt;<br>            &lt;img src=&quot;@/img/1.png&quot; alt=&quot;&quot; :style=&quot;&#123;height:heightList[index]&#125;&quot;/&gt;<br>          &lt;/dt&gt;<br>          &lt;dd&gt;<br>            &lt;h2&gt;&#123;&#123; item.title &#125;&#125;&lt;/h2&gt;<br>            &lt;p&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt;<br>            &lt;span&gt;￥&#123;&#123; item.price &#125;&#125;&lt;/span&gt;<br>          &lt;/dd&gt;<br>        &lt;/dl&gt;<br></code></pre></td></tr></table></figure><h1 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h1><p>1.引入组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Theform from &quot;./Theform.vue&quot;; import Thesort from &quot;./Thesort.vue&quot;; import<br>Theword from &quot;./Theword.vue&quot;;<br></code></pre></td></tr></table></figure><p>2.注册组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">components:&#123; Theform, Thesort, Theword &#125;,<br></code></pre></td></tr></table></figure><p>3.挂载到页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;component :is=&quot;注册的组件名，必须是字符串&quot;&gt;&lt;/component&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React Hook</title>
    <link href="/2022/05/30/hooks/"/>
    <url>/2022/05/30/hooks/</url>
    
    <content type="html"><![CDATA[<h2 id="HOOKS"><a href="#HOOKS" class="headerlink" title="HOOKS"></a>HOOKS</h2><p><strong>1.useState() //申明状态</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//变量名   修改参数的方法</span><br></code></pre></td></tr></table></figure><p>修改参数方法的使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//上一次的值prev</span><br>          <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> &#123;<br>              <span class="hljs-comment">//必须return</span><br>            <span class="hljs-keyword">return</span> (prev += <span class="hljs-number">1</span>)<br>          &#125;)<br>        &#125;&#125;<br>      &gt;<br>        dian<br>      &lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setCount(值)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        dian</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>2.useEffect //副作用钩子 类似于生命周期</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//每次修改都会触发</span><br>&#125;)<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//首次渲染会触发</span><br>&#125;, [])<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//依赖值变化会触发</span><br>&#125;, [依赖值])<br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>  <span class="hljs-comment">//unmount会触发</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>3.useRef //获取节点</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> rdom = <span class="hljs-title function_">useRef</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>&lt;div className=<span class="hljs-string">&quot;App&quot;</span> ref=&#123;rdom&#125;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>4.usecontext //上下文向下传递参数</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> appcontext=<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<span class="hljs-comment">//初始化</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appcontext..Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">username:</span>传递的值</span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;&#125;&gt;</span></span><br><span class="language-xml">    &lt;组件一&gt;</span><br><span class="language-xml">        //取值</span><br><span class="language-xml">    const &#123; username &#125; = useContext(AppContext)</span><br><span class="language-xml">    &lt;/组件一&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">appcontext..Provider</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>5.userReducer //高级 usestate，小型仓库</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, &#123; <span class="hljs-attr">count2</span>: <span class="hljs-number">100</span> &#125;);<span class="hljs-comment">//申明</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">state, action</span>) &#123;<span class="hljs-comment">//申明ruducer</span><br><span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;setCount2&#x27;</span>:<br>state.<span class="hljs-property">count2</span> = action.<span class="hljs-property">data</span>;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state))<br>&#125;<br><br>&lt;<span class="hljs-title class_">Button</span> setCount=&#123;<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">//使用</span><br><span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;setCount2&#x27;</span>, <span class="hljs-attr">data</span>: <span class="hljs-number">1000000</span> &#125;)<br>&#125;&#125;&gt;<br></code></pre></td></tr></table></figure><p><strong>6.usecallback //缓存函数</strong></p><p>简单来说就是返回一个函数，只有在依赖项发生变化的时候才会更新（返回一个新的函数）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClickButton</span>=<span class="hljs-string">&#123;handleClickButton2&#125;</span>&gt;</span>Button2<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-keyword">const</span> [count2, setCount2] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> handleClickButton2 = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">setCount2</span>(count2 + <span class="hljs-number">1</span>)<br>&#125;, [count2])<br></code></pre></td></tr></table></figure><p><strong>7.useMemo //缓存数据</strong></p><p>简单来说就是传递一个创建函数和依赖项，创建函数会需要返回一个值，只有在依赖项发生改变的时候，才会重新调用此函数，返回一个新的值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">const</span> userInfo = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//一些昂贵的计算</span><br>&#125;, [count]);<br><span class="hljs-comment">//只有count改变时，userInfo才会更新，否则每次组件渲染函数都会更新</span><br><span class="hljs-keyword">return</span> &lt;<span class="hljs-title class_">UserCard</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="React-Fiber-纤维化"><a href="#React-Fiber-纤维化" class="headerlink" title="React Fiber(纤维化)"></a>React Fiber(纤维化)</h2><p><strong>破解 JavaScript 中同步操作时间过长，进行分片</strong></p><p>在现有 React 中，更新过程是同步的，这可能会导致性能问题。</p><p>当 React 决定要加载或者更新组件树时，会做很多事，比如调用各个组件的生命周期函数，计算和比对 Virtual DOM，最后更新 DOM 树，这整个过程是同步进行的，也就是说只要一个加载或者更新过程开始，那 React 就以不破楼兰终不还的气概，一鼓作气运行到底，中途绝不停歇。</p><p>表面上看，这样的设计也是挺合理的，因为更新过程不会有任何 I/O 操作嘛，完全是 CPU 计算，所以无需异步操作，的确只要一路狂奔就行了，但是，当组件树比较庞大的时候，问题就来了。</p><p>假如更新一个组件需要 1 毫秒，如果有 200 个组件要更新，那就需要 200 毫秒，在这 200 毫秒的更新过程中，浏览器那个唯一的主线程都在专心运行更新操作，无暇去做任何其他的事情。想象一下，在这 200 毫秒内，用户往一个 input 元素中输入点什么，敲击键盘也不会获得响应，因为渲染输入按键结果也是浏览器主线程的工作，但是浏览器主线程被 React 占着呢，抽不出空，最后的结果就是用户敲了按键看不到反应，等 React 更新过程结束之后，咔咔咔那些按键一下子出现在 input 元素里了。</p><p>这就是所谓的界面卡顿，很不好的用户体验。</p><p>现有的 React 版本，当组件树很大的时候就会出现这种问题，因为更新过程是同步地一层组件套一层组件，逐渐深入的过程，在更新完所有组件之前不停止，函数的调用栈就像下图这样，调用得很深，而且很长时间不会返回。</p><p>因为 JavaScript 单线程的特点，每个同步任务不能耗时太长，不然就会让程序不会对其他输入作出相应，React 的更新过程就是犯了这个禁忌，而 React Fiber 就是要改变现状。</p><p>React Fiber 的方式</p><p>破解 JavaScript 中同步操作时间过长的方法其实很简单——分片。</p><p>把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会。</p><p>React Fiber 把更新过程碎片化，执行过程如下面的图所示，每执行完一段更新过程，就把控制权交还给 React 负责任务协调的模块，看看有没有其他紧急任务要做，如果没有就继续去更新，如果有紧急任务，那就去做紧急任务。</p><p>维护每一个分片的数据结构，就是 Fiber。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue移动端适配rem</title>
    <link href="/2022/05/30/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/30/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-移动端适配-rem"><a href="#vue-移动端适配-rem" class="headerlink" title="vue 移动端适配 rem"></a><strong>vue 移动端适配 rem</strong></h1><h2 id="1-禁用缩放"><a href="#1-禁用缩放" class="headerlink" title="1.禁用缩放"></a>1.禁用缩放</h2><p>在 vue 根 html 文件粘贴 meat 标签（public/index.html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--禁止页面缩放--&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="2-rem-自适应布局"><a href="#2-rem-自适应布局" class="headerlink" title="2.rem 自适应布局"></a>2.rem 自适应布局</h2><p>​ ·准备计算大小的 js 文件（assets/js/htmlFontSize.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义最大的 fontSize</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_FONT_SIZE</span> = <span class="hljs-number">42</span><br><br><span class="hljs-comment">// 监听 html 文档被解析完成的事件</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取 html 标签</span><br>  <span class="hljs-keyword">const</span> html = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;html&#x27;</span>)<br>  <span class="hljs-comment">// 获取根元素 fontSize 标准，屏幕宽度 / 10</span><br>  <span class="hljs-keyword">let</span> fontSize = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-number">10</span><br>  <span class="hljs-comment">// 获取到的 fontSize 不允许超过我们定义的最大值</span><br>  fontSize = fontSize &gt; <span class="hljs-variable constant_">MAX_FONT_SIZE</span> ? <span class="hljs-variable constant_">MAX_FONT_SIZE</span> : fontSize<br>  <span class="hljs-comment">// 定义根元素（html）fontSize 的大小 （rem）</span><br>  html.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = fontSize + <span class="hljs-string">&#x27;px&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>​ ·准备三个 scss 文件：</p><p>​ px2rem 函数 scss 文件(assets/dimens.scss)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 定义预计根元素 fontSize -&gt; Iphone 6、6s、7、8</span><br><span class="hljs-variable">$rootFontSize</span>: <span class="hljs-number">375</span> / <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 定义像素转化为 rem 的函数</span><br><span class="hljs-keyword">@function</span> px2rem(<span class="hljs-variable">$px</span>) &#123;<br>  <span class="hljs-keyword">@return</span> <span class="hljs-variable">$px</span> / <span class="hljs-variable">$rootFontSize</span> + rem;<br>&#125;<br><span class="hljs-comment">//一些主题参数</span><br><span class="hljs-variable">$titleSize</span>: px2rem(<span class="hljs-number">20</span>);<br><span class="hljs-variable">$infoSize</span>: px2rem(<span class="hljs-number">14</span>);<br><span class="hljs-variable">$minInfoSize</span>: px2rem(<span class="hljs-number">12</span>);<br><span class="hljs-variable">$radiusSize</span>: px2rem(<span class="hljs-number">6</span>);<br><span class="hljs-variable">$marginSize</span>: px2rem(<span class="hljs-number">8</span>);<br><span class="hljs-variable">$checkSize</span>: px2rem(<span class="hljs-number">18</span>);<br><span class="hljs-variable">$listGoodsImgSize</span>: px2rem(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>​ 全局样式 scss 文件（可上网查）(assets/reset.scss)</p><p>​ 管理所有 scss 文件的 scss 文件(style.scss)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//引入各个scss文件</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./dimens.scss&#x27;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./reset.scss&#x27;</span>;<br></code></pre></td></tr></table></figure><p>​ ·将计算大小的 js 文件引入 main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@js/htmlFontSize.js&#x27;</span><br></code></pre></td></tr></table></figure><p>​ ·将管理所有 scss 引入 app.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;scss&quot;&gt;<br>@import &#x27;@css/style.scss&#x27;;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="3-移动端-300-毫秒延迟"><a href="#3-移动端-300-毫秒延迟" class="headerlink" title="3.移动端 300 毫秒延迟"></a>3.移动端 300 毫秒延迟</h2><p>​ ·下包</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i fastclick -D<br></code></pre></td></tr></table></figure><p>​ ·在 main.js 中引入并挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> fastClick <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fastclick&#x27;</span><br>fastClick.<span class="hljs-title function_">attach</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>)<br></code></pre></td></tr></table></figure><h2 id="4-svg-文件配置"><a href="#4-svg-文件配置" class="headerlink" title="4.svg 文件配置"></a>4.svg 文件配置</h2><p>​ ·配置 vue.config.js 的 loader，并配置@快捷符号</p><p>​ 下包 npm i svg-sprite-loader -D</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">4000</span>,<br>    <span class="hljs-attr">proxy</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// webpack 配置进行更细粒度的修改  https://cli.vuejs.org/zh/config/#chainwebpack</span><br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//修改文件引入自定义路径</span><br>    config.<span class="hljs-property">resolve</span>.<span class="hljs-property">alias</span><br>      .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;@&#x27;</span>, path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./src&#x27;</span>))<br>      .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;@c&#x27;</span>, path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./src/components&#x27;</span>))<br>      .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;@css&#x27;</span>, path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./src/assets/css&#x27;</span>))<br>      .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;@img&#x27;</span>, path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./src/assets/img&#x27;</span>))<br>      .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;@js&#x27;</span>, path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./src/assets/js&#x27;</span>))<br>    <span class="hljs-comment">// 1. 修改svg规则，排除icons目录下的svg文件</span><br>    config.<span class="hljs-property">module</span><br>      .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;svg&#x27;</span>)<br>      <span class="hljs-comment">// 排除icon目录</span><br>      <span class="hljs-comment">// exclude 排除 add 向数组里插入值</span><br>      .<span class="hljs-property">exclude</span>.<span class="hljs-title function_">add</span>(path.<span class="hljs-title function_">resolve</span>(__dirname + <span class="hljs-string">&#x27;/src/icons&#x27;</span>))<br>    <span class="hljs-comment">// 2. 新增规则，仅打包icons目录下的svg</span><br>    config.<span class="hljs-property">module</span><br>      .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;icons&#x27;</span>) <span class="hljs-comment">// 规则名称 有则取 无则添加</span><br>      .<span class="hljs-title function_">test</span>(<span class="hljs-regexp">/\.svg$/</span>) <span class="hljs-comment">// 匹配规则</span><br>      <span class="hljs-comment">// 使用了add之后 会离开当前链的上下文 所以需要end再返回上一步</span><br>      .<span class="hljs-property">include</span>.<span class="hljs-title function_">add</span>(path.<span class="hljs-title function_">resolve</span>(__dirname + <span class="hljs-string">&#x27;/src/icons&#x27;</span>)) <span class="hljs-comment">// 仅匹配icons 下的 svg</span><br>      .<span class="hljs-title function_">end</span>()<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>      .<span class="hljs-title function_">options</span>(&#123;<br>        <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[name]&#x27;</span>,<br>      &#125;)<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>​ ·在 src 文件夹下创建 icons 文件夹，并配置 index.js</p><p>​ <img src="C:\Users\郝培贤\AppData\Roaming\Typora\typora-user-images\image-20210223233715432.png" alt="image-20210223233715432" style="zoom:33%;" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// require.context(目录, 是否向下递归查找, 匹配文件规则)</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SvgIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/SvgIcon.vue&#x27;</span><br><br><span class="hljs-comment">// 批量导入</span><br><span class="hljs-keyword">const</span> req = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<span class="hljs-string">&#x27;./svg&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.svg$/</span>)<br><span class="hljs-comment">// req.keys() 返回一个由匹配文件路径组成的数组</span><br>req.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">map</span>(req)<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;svg-icon&#x27;</span>, <span class="hljs-title class_">SvgIcon</span>)<br></code></pre></td></tr></table></figure><p>​ ·在 main.js 引入这个 index.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./icons/index.js&#x27;</span> <span class="hljs-comment">// 引入icons列表 并注册svg-icon组件</span><br></code></pre></td></tr></table></figure><p>​ ·创建一个组件用来生成 svg 图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot; v-on=&quot;$listeners&quot;&gt;<br>    &lt;use :xlink:href=&quot;iconName&quot; /&gt;<br>  &lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// doc: https://panjiachen.github.io/vue-element-admin-site/feature/component/svg-icon.html#usage<br><br>export default &#123;<br>  name: &#x27;SvgIcon&#x27;,<br>  props: &#123;<br>    iconClass: &#123;<br>      type: String,<br>      required: true,<br>    &#125;,<br>    className: &#123;<br>      type: String,<br>      default: &#x27;&#x27;,<br>    &#125;,<br>  &#125;,<br>  computed: &#123;<br>    iconName() &#123;<br>      return `#icon-$&#123;this.iconClass&#125;`<br>    &#125;,<br>    svgClass() &#123;<br>      if (this.className) &#123;<br>        return &#x27;svg-icon &#x27; + this.className<br>      &#125; else &#123;<br>        return &#x27;svg-icon&#x27;<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.svg-icon &#123;<br>  width: 1em;<br>  height: 1em;<br>  vertical-align: -0.15em;<br>  fill: currentColor;<br>  overflow: hidden;<br>&#125;<br><br>.svg-external-icon &#123;<br>  background-color: currentColor;<br>  mask-size: cover !important;<br>  display: inline-block;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>​ ·在页面中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;svg-icon iconClass=&quot;blueman&quot;&gt;&lt;/svg-icon&gt;<br>//blueman是svg文件的名称（不包括后缀）<br></code></pre></td></tr></table></figure><h2 id="5-封装-axios-并挂载到全局"><a href="#5-封装-axios-并挂载到全局" class="headerlink" title="5.封装 axios 并挂载到全局"></a>5.封装 axios 并挂载到全局</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>socket.io实现实时通讯</title>
    <link href="/2022/05/30/socket.io%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    <url>/2022/05/30/socket.io%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E9%80%9A%E8%AE%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="socket-io-实现实时通讯"><a href="#socket-io-实现实时通讯" class="headerlink" title="socket.io 实现实时通讯"></a>socket.io 实现实时通讯</h1><h3 id="使用框架：umi"><a href="#使用框架：umi" class="headerlink" title="使用框架：umi"></a>使用框架：umi</h3><h3 id="依赖包："><a href="#依赖包：" class="headerlink" title="依赖包："></a>依赖包：</h3><p>​ <strong>socket.io(启服务)</strong></p><p>​ <strong>socket.io-client(连接服务)</strong></p><h2 id="1-搭建服务"><a href="#1-搭建服务" class="headerlink" title="1.搭建服务"></a>1.搭建服务</h2><p>提示：io 实例可以向所有人发消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*构建http服务*/</span><br><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>).<span class="hljs-title function_">createServer</span>()<br><span class="hljs-comment">/*引入socket.io*/</span><br><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;socket.io&#x27;</span>)(app)<br><span class="hljs-comment">/*定义监听端口，可以自定义，端口不要被占用*/</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">PORT</span> = <span class="hljs-number">8083</span> <span class="hljs-comment">//此端口需要前端代理</span><br><span class="hljs-comment">/*监听端口*/</span><br><span class="hljs-keyword">var</span> arr = [] <span class="hljs-comment">//用户列表</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>)<br>io.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) &#123;<br>  <span class="hljs-comment">//前后端连接</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人打开了&#x27;</span>)<br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;login&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">&#123; user &#125;</span>) &#123;<br>    <span class="hljs-comment">//接收到前端发来的登录消息</span><br>    <span class="hljs-keyword">if</span> (arr.<span class="hljs-title function_">indexOf</span>(user) == -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">//判断用户名是否被占用</span><br>      arr.<span class="hljs-title function_">push</span>(user)<br>      socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;loginSuccess&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">//向前端发送登陆成功消息</span><br>      io.<span class="hljs-property">sockets</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">//通过io实例通知所有人有用户登录</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;loginError&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">//向前端发送用户名被占用消息</span><br>    &#125;<br>  &#125;)<br><br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;send&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">//接收到前端通讯的消息</span><br>    io.<span class="hljs-property">sockets</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;addsay&#x27;</span>, data) <span class="hljs-comment">//通过io实例通知所有人要发的消息</span><br>  &#125;)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;app listen at&#x27;</span> + <span class="hljs-variable constant_">PORT</span>) <span class="hljs-comment">//提示</span><br></code></pre></td></tr></table></figure><h2 id="2-前端代理"><a href="#2-前端代理" class="headerlink" title="2.前端代理"></a>2.前端代理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">proxy</span>:&#123;<br>    <span class="hljs-string">&#x27;/socket.io&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;ws://localhost:8083&#x27;</span>,<span class="hljs-comment">//端口号要和后台服务一致</span><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="3-与服务连接"><a href="#3-与服务连接" class="headerlink" title="3.与服务连接"></a>3.与服务连接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;socket.io-client&#x27;</span>)<br><span class="hljs-keyword">const</span> socket = io.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//接收服务端的好友登录消息</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;您的好友上线了&#x27;</span>)<br>&#125;)<br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;loginSuccess&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//接收登陆成功通知</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上线成功&#x27;</span>)<br>&#125;)<br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;loginError&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//接收登录失败，用户名被占用通知</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;此昵称已被使用&#x27;</span>)<br>&#125;)<br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;addsay&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">&#123; user, title &#125;</span>) &#123;<br>  <span class="hljs-comment">//接收其他用户的消息</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user + <span class="hljs-string">&#x27;:&#x27;</span> + title)<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">//向前端组件抛出登录函数</span><br>  socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;login&#x27;</span>, data)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">//向前端组件抛出发送消息组件</span><br>  socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;send&#x27;</span>, data)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-前端接收事件并调用"><a href="#4-前端接收事件并调用" class="headerlink" title="4.前端接收事件并调用"></a>4.前端接收事件并调用</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; login, send &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utilis/socketmodule.js&#x27;</span> <span class="hljs-comment">//引入utils抛出的两个方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [user, setUser] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">//讲输入框改为受控组件</span><br>  <span class="hljs-keyword">const</span> [title, setTitle] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;say&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setUser(e.target.value)</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          login(&#123; user &#125;)</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        登录</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>//登录并传递参数</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">          setTitle(e.target.value)</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          send(&#123; user, title &#125;)</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        发送</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      //发送消息并传递参数</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>五分钟上手Egg.js</title>
    <link href="/2022/05/30/%E4%BA%94%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BEgg.js/"/>
    <url>/2022/05/30/%E4%BA%94%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BEgg.js/</url>
    
    <content type="html"><![CDATA[<h1 id="五分钟上手Egg-js"><a href="#五分钟上手Egg-js" class="headerlink" title="五分钟上手Egg.js"></a>五分钟上手Egg.js</h1><h3 id="请求传参"><a href="#请求传参" class="headerlink" title="请求传参"></a>请求传参</h3><ol><li><p>get请求</p><p>问号传参（query string），当key不重复时ctx.query接收，key重复时ctx.queries接收</p><p>斜杠传参（params）,需配合params路由,params接收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/projects/:projectId/app/:appId&#x27;</span>, <span class="hljs-string">&#x27;app.listApp&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><p>​    2.post请求</p><p>​        body传参，通过ctx.request.body接收</p><p>​    3.put请求（与post请求一致）</p><p>​    4.delete请求（与params一致）</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><ol><li><p>下载egg-view-ejs依赖包，配置plugin和config.default</p></li><li><p>在app文件夹下创建view文件夹，用于存放页面模板</p></li><li><p>在controller使用时需要await 同步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">await</span> ctx.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>，&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>&#125;)<br>    <span class="hljs-comment">//render接收两个参数（模板文件名称，变量参数）</span><br>  &#125;<br></code></pre></td></tr></table></figure></li></ol><p>​    4.模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>       id==&lt;%=id%&gt;  //参数需要写在&lt;%=参数%&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    //ejs渲染列表<br>     &lt;%for(var i=0;i&lt;list.length;i++)&#123;%&gt;<br>         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&lt;%=list[i]%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     &lt;/%&#125;%&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>app/public 可存放css,js,img</p><h3 id="Mysql安装及在egg-js中使用"><a href="#Mysql安装及在egg-js中使用" class="headerlink" title="Mysql安装及在egg.js中使用"></a>Mysql安装及在egg.js中使用</h3><ol><li><p>mysql官网安装<a href="https://dev.mysql.com/downloads/">MySQL Community (GPL) Downloads </a>  <a href="https://dev.mysql.com/downloads/windows/">MySQL Installer for Windows</a>安装目录不可有中文**(执行命令行记得加分号)**</p><table><thead><tr><th>登录mysql</th><th>mysql -uroot -p</th></tr></thead><tbody><tr><td>查看所有数据库</td><td>show databases;</td></tr><tr><td>创建某个数据库</td><td>create database 数据库名称;</td></tr><tr><td>使用数据库</td><td>use 数据库名称;</td></tr><tr><td>查当前数据库下所有表</td><td>show tables;</td></tr><tr><td>在当前数据库创建表</td><td>create table 表名称；</td></tr><tr><td>初始化表头</td><td>insert into 表名称（每列字段…）values (初始值…)</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database egg_articel;<br><br>use egg_articel;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> articel(<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>    img text <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;缩略图&#x27;</span>,<br>    title <span class="hljs-type">varchar</span>(<span class="hljs-number">80</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;文章标题&#x27;</span>,<br>    summery <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;文章简介&#x27;</span>,<br>    content text <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;文章简介&#x27;</span>,<br>    createTime <span class="hljs-type">timestamp</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;发布时间&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key(id)<br>) engine <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span> comment <span class="hljs-string">&#x27;文章表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span><br>    articel(img, title, summery, content, createTime)<br><span class="hljs-keyword">values</span><br>(<br>        &quot;http://img2.baidu.com/it/u=98371021,1121096365&amp;fm=253&amp;app=53&amp;size=w500&amp;n=0&amp;g=0n&amp;f=jpeg?sec=1645954024&amp;t=8acca60457863baf7af19ccfa9c76925&quot;,<br>        <span class="hljs-string">&#x27;新年快乐&#x27;</span>,<br>        <span class="hljs-string">&#x27;2022虎年快乐&#x27;</span>,<br>        <span class="hljs-string">&#x27;asdasdqwdasdasdqwdasdasdasdasd&#x27;</span>,<br>        <span class="hljs-string">&#x27;2022-01-28 17:30:00&#x27;</span><br>    )<br></code></pre></td></tr></table></figure></li><li><p>egg.js连接数据库</p><p>根据官网引导</p><ul><li><p>安装依赖包 npm i –save egg-mysql</p></li><li><p>开启插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// config/plugin.js</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">mysql</span> = &#123;<br>  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">package</span>: <span class="hljs-string">&#x27;egg-mysql&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>配置config.default.js 连接数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// config.default.js</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">mysql</span> = &#123;<span class="hljs-comment">//  ==========注意此处需要将exports替换为config</span><br>  <span class="hljs-comment">// 单数据库信息配置</span><br>  <span class="hljs-attr">client</span>: &#123;<br>    <span class="hljs-comment">// host</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;mysql.com&#x27;</span>,<br>    <span class="hljs-comment">// 端口号</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    <span class="hljs-comment">// 用户名</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;test_user&#x27;</span>,<br>    <span class="hljs-comment">// 密码</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;test_password&#x27;</span>,<br>    <span class="hljs-comment">// 数据库名</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 是否加载到 app 上，默认开启</span><br>  <span class="hljs-attr">app</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 是否加载到 agent 上，默认关闭</span><br>  <span class="hljs-attr">agent</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>配置完成后mysql会挂载到app上，controller查询表app.mysql.select(‘表名称’)，如果控制台返回了promise则说明未加await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Controller</span> &#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">await</span> ctx.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>, &#123; res &#125;) */<br>    <span class="hljs-keyword">const</span> res =<span class="hljs-keyword">await</span> app.<span class="hljs-property">mysql</span>.<span class="hljs-title function_">select</span>(<span class="hljs-string">&#x27;articel&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;res&#x27;</span>)<br>    ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27; egg&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="node第一次连接mysql，报错Client-does-not-support-authentication-protocol-requested-by-server的问题"><a href="#node第一次连接mysql，报错Client-does-not-support-authentication-protocol-requested-by-server的问题" class="headerlink" title="node第一次连接mysql，报错Client does not support authentication protocol requested by server的问题"></a>node第一次连接mysql，报错Client does not support authentication protocol requested by server的问题</h4><p>原因： 在项目里面通过npm install 安装的mysql和最新版本MySQL加密方式不同，导致连接失败。</p><p>在最新下载的MySql客户端版本使用的是caching_sha2_password加密方式，所以默认创建的root用户和密码都是这个加密方式。而npm包里的mysql模块还是使用原来的mysql_native_password加密方式，两者不互通，连接会报错。</p><p>解决方法： 将mysql的用户密码从caching_sha2_password加密方式改回mysql模块能支持的 mysql_native_password加密方式</p><p><strong>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</strong></p><p>如上，将密码<strong>123456</strong>的认证修改成mysql_native_password，之后再连接mysql就会成功</p><!-- ![](https://github.com/PH2498/PH2498.github.io/blob/master/img/egg/egg.js.png) -->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web面试题</title>
    <link href="/2022/05/30/web%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/05/30/web%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE-面试题"><a href="#VUE-面试题" class="headerlink" title="VUE 面试题"></a>VUE 面试题</h1><ol><li><h2 id="Vue3-中的响应式和-2-有何区别"><a href="#Vue3-中的响应式和-2-有何区别" class="headerlink" title="Vue3 中的响应式和 2 有何区别"></a>Vue3 中的响应式和 2 有何区别</h2><p>Vue 的响应式：通过数据劫持和发布订阅者模式，observe 对数据进行监听，数据发生变化时，通知订阅者修改视图</p><p>Vue2：object.definepropty 进行数据的监听</p><p>缺点：是无法监听动态数据的变化，后加入的属性不会被双向绑定</p><p>解决方法：通过$set 使动态添加的数据属性可以被双向绑定</p><p>Vue3:proxy 进行数据监听</p><p>优点：可以监听任意数据的动态变化，包括 es6 的一些数据类型。</p><p>缺点：对一些比较落后的浏览器兼容性不是很好</p></li><li><h2 id="介绍-js-全部数据类型，基本数据类型和引用数据类型的区别-类数组转数组的方法有哪些"><a href="#介绍-js-全部数据类型，基本数据类型和引用数据类型的区别-类数组转数组的方法有哪些" class="headerlink" title="介绍 js 全部数据类型，基本数据类型和引用数据类型的区别 类数组转数组的方法有哪些"></a><strong>介绍 js 全部数据类型，基本数据类型和引用数据类型的区别</strong> 类数组转数组的方法有哪些</h2><p>Number、String、Boolean、Null、undefined、object、symbol、bigInt。8 种</p><p>基本类型和引用类型的区别：</p><p>​ 1。内存分配：基本类型储存在栈，引用类型储存在堆</p><p>​ 2.访问机制：基本类型直接取值，引用类型返回一个地址通过地址取值</p><p>​ 3.复制变量：基本类型复制一个独立的值，引用类型复制出来的值与被复制的值共享一块内存地址（浅拷贝）</p><p>​ 4.参数传递：</p><p>​ 原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。</p><p>​ 引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象。</p><h2 id="3-从输入-URL-到地址栏到所有内容显示到浏览器做了哪些事？"><a href="#3-从输入-URL-到地址栏到所有内容显示到浏览器做了哪些事？" class="headerlink" title="3.从输入 URL 到地址栏到所有内容显示到浏览器做了哪些事？"></a>3.从输入 URL 到地址栏到所有内容显示到浏览器做了哪些事？</h2><ol><li><p>解析 url 地址</p></li><li><p>DNS 解析</p></li><li><p>TCP 链接</p></li><li><p>发送 http 请求</p></li><li><p>服务器接收请求</p></li><li><p>服务器响应</p></li><li><p>TCP 链接断开</p></li><li><p>浏览器解析资源</p><h2 id="4-Mvvm-mvc"><a href="#4-Mvvm-mvc" class="headerlink" title="4.Mvvm mvc"></a>4.Mvvm mvc</h2></li></ol></li></ol><p>1.MVC<br>MVC 思想概括为 Controller 负责将 Model 的数据用 View 显示出来。</p><p>M、V、C</p><p>Model（模型）：职能单一，只负责操作数据库，执行对应的 sql 语句，进行数据的 CRUD。</p><p>View（视图）：在应用程序中负责处理数据显示的部分。</p><p>Controller（控制器）：负责用户交互，包括路由分发处理层和业务逻辑处理层。</p><p>2.MVVM</p><p>MVVM 是前端视图层的分层开发思想，主要把每个页面分成了 M、V 和 VM。其中，VM 是 MVVM 思想的核心，因为 VM 是 M 和 V 之间的调度者。同时，MVVM 提供了数据的双向绑定，这让我们的开发变得更加方便。</p><h2 id="5-自定义指令，和-mixins-使用场景-每个说三个"><a href="#5-自定义指令，和-mixins-使用场景-每个说三个" class="headerlink" title="5.自定义指令，和 mixins 使用场景 每个说三个"></a>5.自定义指令，和 mixins 使用场景 每个说三个</h2><p>自定义指令在 vue 中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统 我们看到的 v-开头的行内属性，都是指令，Vue.directive 方法进行注册.</p><p>应用场景：</p><ul><li>防抖</li><li>图片懒加载</li><li>一键 Copy 的功能</li><li>输入框防抖</li></ul><p>mixins 当我们存在多个组件中的数据或者功能很相近时，我们就可以利用 mixins 将公共部分提取出来，通过 mixins 封装的函数，组件调用他们是不会改变函数作用域外部的。</p><p><strong>方法和参数在各组件中不共享，虽然组件调用了 mixins 并将其属性合并到自身组件中来了，但是其属性只会被当前组件所识别并不会被共享，也就是其他组件无法从当前组件中获取到 mixins 中的数据和方法。</strong></p><p><strong>与 vuex 的区别</strong></p><p><strong>vuex：</strong>用来做状态管理的，里面定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。</p><p><strong>Mixins：</strong>可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。</p><p><strong>与公共组件的区别</strong></p><p><strong>组件</strong>：在父组件中引入组件，相当于在父组件中给出一片独立的空间供子组件使用，然后根据 props 来传值，但本质上两者是相对独立的。</p><p><strong>Mixins：</strong>则是在引入组件之后与组件中的对象和方法进行合并，相当于扩展了父组件的对象与方法，可以理解为形成了一个新的组件。</p><h2 id="6。跨域，解决跨域的方法"><a href="#6。跨域，解决跨域的方法" class="headerlink" title="6。跨域，解决跨域的方法"></a>6。跨域，解决跨域的方法</h2><p>是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对 JavaScript 实施的安全限制。</p><p>同源：端口相同、协议相同、域名相同；三者有一个不同就是跨域</p><p><strong>方法一：JSONP 跨域</strong></p><p>本质是利用了标签具有可跨域的特性；我们使用 script 标签请求地址，带上参数，参数值是我们在全局定义的一个函数；然后返回数据的时候，我们返回这个函数的调用，带上我们要传递回来的数据作为参数进行传递，这样浏览器会直接执行这个函数；这样就实现了跨域；</p><p>缺点：不支持 post；只能是 get,jsonp 需要服务端的支持</p><p><strong>方案二、CORS 跨域</strong></p><p>JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求</p><p>只需服务器端设置 Access-Control-Allow-Origin</p><p><strong>方案三、代理</strong></p><p>vue 的 proxy</p><h2 id="7-eventloop-事件循环"><a href="#7-eventloop-事件循环" class="headerlink" title="7.eventloop 事件循环"></a>7.eventloop 事件循环</h2><h2 id="8-vue-单页与多页的区别"><a href="#8-vue-单页与多页的区别" class="headerlink" title="8.vue 单页与多页的区别"></a>8.vue 单页与多页的区别</h2><p><strong>SPA 单页面应用（SinglePage Web Application）</strong>，指只有一个主页面的应用（一个 html 页面），一开始只需要加载一次 js、css 的相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅仅刷新局部资源。</p><p><strong>MPA 多页面应用（MultiPage Application）</strong>，指有多个独立页面的应用（多个 html 页面），每个页面必须重复加载 js、css 等相关资源。多页应用跳转，需要整页资源刷新。</p><p><img src="https://img-blog.csdnimg.cn/20200725093042256.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MDcwNDYw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="9-回流重绘"><a href="#9-回流重绘" class="headerlink" title="9.回流重绘"></a>9.回流重绘</h2><p><strong>1.回流的概念：</strong></p><p>将可见 DOM 节点以及它对应的样式结合起来，可是我们还需要计算它们在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流</p><p><strong>2.重绘概念：</strong></p><p>我们通过构造渲染树和回流阶段，我们知道了哪些节点是可见的，以及可见节点的样式和具体的几何信息(位置、大小)，那么我们就可以将渲染树的每个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘节点</p><p>比如以下情况：</p><p>a.添加或删除可见的 DOM 元素</p><p>b.元素的位置发生变化</p><p>c.元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</p><p>d.内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</p><p>e.页面一开始渲染的时候（这肯定避免不了）</p><p>回流一定会触发重绘，而重绘不一定会回流</p><h2 id="10-什么是-tree-shaking"><a href="#10-什么是-tree-shaking" class="headerlink" title="10 什么是 tree-shaking"></a>10 什么是 tree-shaking</h2><p>tree shaking 是一个术语,通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//math.js</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">minus</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a - b)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后 index.js 里面导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math.js&#x27;</span><br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>接着我们 build 打包一下，发现打包后端的文件除了 add 的代码外还包含了没有使用的 minus 相关代码。</p><p>这个其实是没有必要的，会使得 js 文件变大，理想情况下就是引入什么真正用到了什么，你帮我打包什么。</p><p>这也就是 webpack 提供的 tree shaking 功能 — 把一个模块里面没用的部分摇掉，只留下部分需要的。</p><h2 id="11-回调函数和任务队列的区别"><a href="#11-回调函数和任务队列的区别" class="headerlink" title="11 回调函数和任务队列的区别"></a>11 回调函数和任务队列的区别</h2><h2 id="12Vue-是怎么做到数组响应式的"><a href="#12Vue-是怎么做到数组响应式的" class="headerlink" title="12Vue 是怎么做到数组响应式的?"></a>12Vue 是怎么做到数组响应式的?</h2><p>Vue 的响应式：通过数据劫持和发布订阅者模式，observe 对数据进行监听，数据发生变化时，通知订阅者修改视图</p><p>Vue2：object.definepropty 进行数据的监听</p><p>缺点：是无法监听动态数据的变化，后加入的属性不会被双向绑定</p><p>解决方法：通过$set 使动态添加的数据属性可以被双向绑定</p><p>Vue3:proxy 进行数据监听</p><p>优点：可以监听任意数据的动态变化，包括 es6 的一些数据类型。</p><p>缺点：对一些比较落后的浏览器兼容性不是很好</p><h2 id="13-ts-的优势"><a href="#13-ts-的优势" class="headerlink" title="13.ts 的优势"></a>13.ts 的优势</h2><p><strong>TypeScrip 的第一大优势 支持 ES6</strong></p><p><strong>TypeScript 的第二大优势 强大的 IDE 支持</strong>：<strong>类型检测</strong>，<strong>语法提示</strong>，<strong>重构</strong></p><p><strong>TypeScript 的第三大优势 Angular2 框架的开发语言</strong></p><h2 id="14Redux-和-Vuex"><a href="#14Redux-和-Vuex" class="headerlink" title="14Redux 和 Vuex"></a>14Redux 和 Vuex</h2><p>状态管理工具</p><table><thead><tr><th>Redux 的核心概念</th><th>Vuex 的核心概念</th></tr></thead><tbody><tr><td>action （同步 action ，或借助 中间件 实现异步操作，action 不会改变 store，只是描述了怎么改变 store）</td><td>mutation（用于同步操作） 、action（可用于异步操作，提交 mutation）</td></tr><tr><td>reducer（纯函数，根据 action 和旧的 store 计算出新的 store</td><td>mutation 里面直接修改 state</td></tr><tr><td>store（单一数据源）</td><td>state（单一数据源）</td></tr></tbody></table><h2 id="15Vue-项目优化"><a href="#15Vue-项目优化" class="headerlink" title="15Vue 项目优化"></a>15Vue 项目优化</h2><p>mixins，computed，watch，ssr，tree-shaking，自定义指令</p><h2 id="16-什么是-ssr（服务端渲染）"><a href="#16-什么是-ssr（服务端渲染）" class="headerlink" title="16 什么是 ssr（服务端渲染）"></a>16 什么是 ssr（服务端渲染）</h2><p><code>SSR</code>大致的意思就是<code>vue</code>在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的<code>html</code> 片段直接返回给客户端这个过程就叫做服务端渲染。 服务端渲染 <code>SSR</code></p><p>更多的开发条件限制： 例如服务端渲染只支持<code>beforCreate</code>和 <code>created</code> 两个钩子函数，</p><p>更多的服务器负载</p><p>更好的 seo</p><h2 id="17-什么是-SEO"><a href="#17-什么是-SEO" class="headerlink" title="17 什么是 SEO"></a>17 什么是 SEO</h2><p>SEO(Search Engine Optimization)，即搜索引擎优化。SEO 是随着搜索引擎的出现而来的，两者是相互促进，互利共生的关系。SEO 的存在就是为了提升网页在搜索引擎自然搜索结果中的收录数量以及排序位置而做的优化行为。而优化的目的就是为了提升网站在搜索引擎中的权重，增加对搜索引擎的友好度，使得用户在访问网站时能排在前面。</p><h2 id="18-数组扁平化"><a href="#18-数组扁平化" class="headerlink" title="18.数组扁平化"></a>18.数组扁平化</h2><p>多维数组转一维数组</p><p>1.flat</p><p>2.ruduce</p><p>3.递归</p><h2 id="19-深入理解-computed-、watch-、-methods"><a href="#19-深入理解-computed-、watch-、-methods" class="headerlink" title="19 深入理解 computed 、watch 、 methods"></a>19 深入理解 computed 、watch 、 methods</h2><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul><li>当依赖某些状态(data 中的数据)发生变化时，优先选择使用 computed</li></ul><p>举个例子，总价 = 数量 * 价格，当数量和价格发生变化时都会影响总价，这时计算属性就派上用场了。</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul><li>用来解决 beforeUpdate, updated 两个钩子里修改状态导致死循环的问题，采用 watch</li><li>监测可能异步改变值得时候</li></ul><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><ul><li>定义事件响应函数</li><li>定义组件公共处理函数</li></ul><h3 id="computed-和-methods-区别"><a href="#computed-和-methods-区别" class="headerlink" title="computed 和 methods 区别"></a>computed 和 methods 区别</h3><ol><li>相同点</li></ol><ul><li>如果作为模板的数据显示，二者都能实现相应的功能，唯一不同的是 methods 定义的方法需要执行</li></ul><ol><li>不同点</li></ol><ul><li>computed 会基于响应数据缓存，methods 不会缓存</li><li>diff 之前先看 data 里的数据是否发生变化，如果没有变化 computed 的方法不会执行，但 methods 里的方法会执行</li></ul><p><strong>computed</strong></p><p>​ 通过判断源码的 lazy 来判断是否使用缓存</p><p>组件 watcher 计算 watcher 侦听 watcher</p><h2 id="20Object-freeze-是怎么对-Vue-项目实现优化的？"><a href="#20Object-freeze-是怎么对-Vue-项目实现优化的？" class="headerlink" title="20Object.freeze 是怎么对 Vue 项目实现优化的？"></a>20Object.freeze 是怎么对 Vue 项目实现优化的？</h2><p><strong>Object.freeze() 方法用于冻结对象，</strong></p><p>const 的行为像 let。它们唯一的区别是， const 定义了一个无法重新分配的变量。 通过 const 声明的变量是具有块级作用域的，而不是像 var 声明的变量具有函数作用域。</p><p>Object.freeze()接 v eze()并不同，const 是防止变量重新分配，而 Object.freeze()是使对象具有不可变性。</p><p>由于 <code>Object.freeze()</code>会把对象冻结，所以比较适合展示类的场景，如果你的数据属性需要改变，可以重新替换成一个新的 <code>Object.freeze()</code>的对象。</p><h2 id="21-gzip-压缩，如何开启？"><a href="#21-gzip-压缩，如何开启？" class="headerlink" title="21.gzip 压缩，如何开启？"></a>21.gzip 压缩，如何开启？</h2><p>将资源进行压缩，从而降低请求资源的文件大小</p><p>compression-webpack-plugin 是一个非常好用的压缩插件,修改 config 下的 index.js,将 productionGzip 改为 true</p><h2 id="22cookie-和-webStorage-的区别"><a href="#22cookie-和-webStorage-的区别" class="headerlink" title="22cookie 和 webStorage 的区别"></a>22cookie 和 webStorage 的区别</h2><table><thead><tr><th></th><th>sessionStorage</th><th>localStorage</th><th>cookie</th></tr></thead><tbody><tr><td>生命周期</td><td>浏览器关闭</td><td>永久存在，除非自己删除或清除缓存</td><td>可以自己设置，默认到浏览器关闭</td></tr><tr><td>大小限制</td><td>5MB</td><td>5MB</td><td>4K</td></tr><tr><td>与服务器通信</td><td>仅在客户端</td><td>仅在客户端</td><td>每次请求都会携带</td></tr><tr><td>安全性</td><td>相对于 cookie 来说高一些，不用担心截获，但是仍然存在伪造问题</td><td>相对于 cookie 来说高一些，不用担心截获，但是仍然存在伪造问题</td><td>安全性较低（Cookie 欺骗，Cookie 截获）</td></tr><tr><td>应用场景</td><td>敏感账号一次性登录</td><td>常用于长期登录（+判断用户是否已登录）</td><td>判断用户是否登陆过网站</td></tr></tbody></table><h2 id="23vue-路由的钩子函数"><a href="#23vue-路由的钩子函数" class="headerlink" title="23vue 路由的钩子函数"></a>23vue 路由的钩子函数</h2><p><strong>vue-router 全局有三个守卫：</strong>,</p><ol><li>router.beforeEach 全局前置守卫 进入路由之前</li><li>router.beforeResolve 全局解析守卫(2.5.0+) 在 beforeRouteEnter 调用之后调用</li><li>router.afterEach 全局后置钩子 进入路由之后</li></ol><p><strong>路由组件内的守卫：</strong></p><ol><li>beforeRouteEnter 进入路由前</li><li>beforeRouteUpdate (2.2) 路由复用同一个组件时</li><li>beforeRouteLeave 离开当前路由时</li></ol><p><strong>to,from,next 这三个参数：</strong></p><p>to:到哪去</p><p>from：从哪来</p><p>next：进入该路由</p><h2 id="24vue-路由的两种模式及区别"><a href="#24vue-路由的两种模式及区别" class="headerlink" title="24vue 路由的两种模式及区别"></a>24vue 路由的两种模式及区别</h2><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash，原本用来结合锚点控制页面视窗的位置，具有以下特点：</p><ul><li>可以改变 URL，但不会触发页面重新加载（hash 的改变会记录在 window.hisotry 中）因此并不算是一次 http 请求，所以这种模式不利于 SEO 优化</li><li>只能修改#后面的部分，因此只能跳转与当前 URL 同文档的 URL</li><li>只能通过字符串改变 URL</li><li>通过 window.onhashchange 监听 hash 的改变，借此实现无刷新跳转的功能。</li></ul><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>根据 Mozilla Develop Network 的介绍，调用 history.pushState() 相比于直接修改 hash，存在以下优势</p><ul><li>新的 URL 可以是与当前 URL 同源的任意 URL，也可以与当前 URL 一样，但是这样会把重复的一次操作记录到栈中</li><li>通过参数 stateObject 可以添加任意类型的数据到记录中</li><li>可额外设置 title 属性供后续使用</li><li>通过 pushState、replaceState 实现无刷新跳转的功能。</li></ul><p>**1.**hash 路由在地址栏 URL 上有#，而 history 路由没有会好看一点</p><p>**2.**我们进行回车刷新操作，hash 路由会加载到地址栏对应的页面，而 history 路由一般就 404 报错了（刷新是网络请求，没有后端准备时会报错）。</p><p>**3.**hash 路由支持低版本的浏览器，而 history 路由是 HTML5 新增的 API。</p><p>**4.**hash 的特点在于它虽然出现在了 URL 中，但是不包括在 http 请求中，所以对于后端是没有一点影响的，所以改变 hash 不会重新加载页面，所以这也是单页面应用的必备。</p><p>**5.**history 运用了浏览器的历史记录栈，之前有 back,forward,go 方法，之后在 HTML5 中新增了 pushState（）和 replaceState（）方法（需要特定浏览器的支持），它们提供了对历史记录进行修改的功能，不过在进行修改时，虽然改变了当前的 URL，但是浏览器不会马上向后端发送请求。</p><h2 id="25nexttick-是做什么的"><a href="#25nexttick-是做什么的" class="headerlink" title="25nexttick 是做什么的"></a>25nexttick 是做什么的</h2><p>在 creted 生命周期 dom 未渲染，要想拿到 dom 需要使用$nexttick</p><h2 id="26vue-的内置组件都有哪些"><a href="#26vue-的内置组件都有哪些" class="headerlink" title="26vue 的内置组件都有哪些"></a>26vue 的内置组件都有哪些</h2><p><strong>1.<a href="https://cn.vuejs.org/v2/api/#component">component</a>：用于动态组件</strong></p><p><strong>2.<a href="https://cn.vuejs.org/v2/api/#transition">transition</a>：过渡和动画</strong></p><p><strong>3.<a href="https://cn.vuejs.org/v2/api/#transition-group">transition-group</a>：</strong></p><p><strong>4.<a href="https://cn.vuejs.org/v2/api/#keep-alive">keep-alive</a>：</strong>缓存</p><p><strong>5.<a href="https://cn.vuejs.org/v2/api/#slot">slot：插槽</a></strong></p><h2 id="27-vue-过滤器"><a href="#27-vue-过滤器" class="headerlink" title="27.vue 过滤器"></a>27.vue 过滤器</h2><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。有全局和局部两种，通过管道符|来将数据进行编译，可以转化为新的数据，比如时间戳转时间/单位。</p><h2 id="28-虚拟-dom-的优缺点"><a href="#28-虚拟-dom-的优缺点" class="headerlink" title="28.虚拟 dom 的优缺点"></a>28.虚拟 dom 的优缺点</h2><p>用 js 模拟一颗 dom 树，放在浏览器内存中，变更时根据 deff 算法，深度优先，逐层比较</p><p>优点</p><p>保证性能下限：在保证无需手动操作 dom 的情况下将也会有很好的性能</p><p>无需手动操作 dom</p><p>跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等</p><p>缺点:</p><ul><li>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。<br>首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢。</li></ul><h2 id="29-异步组件"><a href="#29-异步组件" class="headerlink" title="29.异步组件"></a>29.异步组件</h2><p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。</p><h2 id="30-nextTick-的底层原理"><a href="#30-nextTick-的底层原理" class="headerlink" title="30.$nextTick 的底层原理"></a>30.$nextTick 的底层原理</h2><p>数据发生更新时拿到最新数据，只有第一次执行时是异步，源码有一个判断。会把所有的回调加到 callbacks 数组中，四个异步 <strong>promise</strong> <strong>mutationobserver</strong> <strong>setimmdiate</strong> <strong>settimeout</strong></p><p>最后通过 flushcallbacks 循环遍历</p><h2 id="31-vue-watch-如何实现深度监听"><a href="#31-vue-watch-如何实现深度监听" class="headerlink" title="31.vue watch 如何实现深度监听"></a>31.vue watch 如何实现深度监听</h2><h2 id="32-HTTPS-是什么"><a href="#32-HTTPS-是什么" class="headerlink" title="32.HTTPS 是什么"></a>32.HTTPS 是什么</h2><p>https 是在 http 和 Tcp 之间建立了一个安全层，HTTP 与 TCP 通信的时候，必须先进过一个安全层，对数据包进行加密，然后将加密后的数据包传送给 TCP，相应的 TCP 必须将数据包解密，才能传给上面的 HTTP。</p><p>TCP 滑动窗口分为两种: <strong>发送窗口</strong>和<strong>接收窗口</strong>。</p><h3 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h3><p>HTTP 缓存又分为强缓存和协商缓存：首先通过 验证强缓存是否可用，如果强缓存可用，那么直接读取缓存。如果不可以，那么进入协商缓存阶段</p><h2 id="33-你知道-302-状态码是什么嘛？你平时浏览网页的过程中遇到过哪些-302-的场景？"><a href="#33-你知道-302-状态码是什么嘛？你平时浏览网页的过程中遇到过哪些-302-的场景？" class="headerlink" title="33.你知道 302 状态码是什么嘛？你平时浏览网页的过程中遇到过哪些 302 的场景？"></a>33.你知道 302 状态码是什么嘛？你平时浏览网页的过程中遇到过哪些 302 的场景？</h2><p>而 302 表示临时重定向，这个资源只是暂时不能被访问了，但是之后过一段时间还是可以继续访问，一般是访问某个网站的资源需要权限时，会需要用户去登录，跳转到登录页面之后登录之后，还可以继续访问。</p><p>301 类似，都会跳转到一个新的网站，但是 301 代表访问的地址的资源被永久移除了，以后都不应该访问这个地址，搜索引擎抓取的时候也会用新的地址替换这个老的。可以在返回的响应的 location 首部去获取到返回的地址。301 的场景如下：</p><ul><li>比如从 <a href="http://baidu.com/">baidu.com</a>，跳转到 <a href="https://baidu.com/">baidu.com</a></li><li>域名换了</li></ul><h2 id="34-WebSocket-与-Ajax-的区别"><a href="#34-WebSocket-与-Ajax-的区别" class="headerlink" title="34.WebSocket 与 Ajax 的区别"></a>34.WebSocket 与 Ajax 的区别</h2><h3 id="本质不同"><a href="#本质不同" class="headerlink" title="本质不同"></a>本质不同</h3><p>Ajax 即异步 JavaScript 和 XML，是一种创建交互式网页的应用的网页开发技术</p><p>websocket 是 HTML5 的一种新协议，实现了浏览器和服务器的实时通信</p><p>生命周期不同：</p><ul><li>websocket 是长连接，会话一直保持</li><li>ajax 发送接收之后就会断开</li></ul><p>适用范围：</p><ul><li>websocket 用于前后端实时交互数据</li><li>ajax 非实时</li></ul><p>发起人：</p><ul><li>AJAX 客户端发起</li><li>WebSocket 服务器端和客户端相互推送</li></ul><p>websocket 是长轮询具体比如在一个电商场景，商品的库存可能会变化，所以需要及时反映给用户，所以客户端会不停的发请求，然后服务器端会不停的去查变化，不管变不变，都返回，这个是短轮询。</p><p>而长轮询则表现为如果没有变，就不返回，而是等待变或者超时（一般是十几秒）才返回，如果没有返回，客户端也不需要一直发请求，所以减少了双方的压力。有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="35-vue-修饰符"><a href="#35-vue-修饰符" class="headerlink" title="35.vue 修饰符"></a>35.vue 修饰符</h2><p>.stop 阻止事件继续传播<br>.prevent 阻止标签默认行为<br>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理<br>.self 只当在 event.target 是当前元素自身时触发处理函数<br>.once 事件将只会触发一次<br>.passive 告诉浏览器你不想阻止事件的默认行为</p><h2 id="36-长列表优化"><a href="#36-长列表优化" class="headerlink" title="36.长列表优化"></a>36.长列表优化</h2><p><strong>背景</strong></p><p>对于很长列表的处理，都是直接全部进行渲染，导致的一个问题就是，加载页面都要加载比较久的时间</p><p>原理：固定的 dom 数量，监听滚动条，渲染不同的数据</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在umi中使用dva</title>
    <link href="/2022/05/30/%E5%9C%A8umi%E4%B8%AD%E4%BD%BF%E7%94%A8dva/"/>
    <url>/2022/05/30/%E5%9C%A8umi%E4%B8%AD%E4%BD%BF%E7%94%A8dva/</url>
    
    <content type="html"><![CDATA[<h1 id="在-umi-中使用-dva"><a href="#在-umi-中使用-dva" class="headerlink" title="在 umi 中使用 dva"></a>在 umi 中使用 dva</h1><ol><li><h3 id="下载依赖包并在-umirc-配置文件中挂载"><a href="#下载依赖包并在-umirc-配置文件中挂载" class="headerlink" title="下载依赖包并在.umirc 配置文件中挂载"></a>下载依赖包并在.umirc 配置文件中挂载</h3><p>npm i dva -D</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">antd</span>: &#123;&#125;, <span class="hljs-comment">//ui库</span><br>  <span class="hljs-attr">dva</span>: &#123;&#125;, <span class="hljs-comment">//dva</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><h3 id="在-src-文件夹下新建-models-文件夹，所有文件放入-models"><a href="#在-src-文件夹下新建-models-文件夹，所有文件放入-models" class="headerlink" title="在 src 文件夹下新建 models 文件夹，所有文件放入 models"></a>在 src 文件夹下新建 models 文件夹，所有文件放入 models</h3><p><img src="/img/dva/image-20210324163155760.png" alt="image-20210324163155760"></p></li><li><h3 id="dav-模板"><a href="#dav-模板" class="headerlink" title="dav 模板"></a>dav 模板</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* import api from &#x27;@/api&#x27;; */</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Toast</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd-mobile&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">roomList</span>: [],<br>  &#125;, <span class="hljs-comment">// 初始状态：缓存或空数组</span><br><br>  <span class="hljs-attr">effects</span>: &#123;<br>    <span class="hljs-comment">// generactor 这玩意还再用，我也是醉了</span><br>    <span class="hljs-comment">//这个执行异步操作，这玩意是* 生成器函数？？</span><br>    *<span class="hljs-title function_">GET_ROOM_LIST</span>(<span class="hljs-params">action, &#123; call, put &#125;</span>) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">call</span>(api.<span class="hljs-property">getList</span>, action.<span class="hljs-property">payload</span>) <span class="hljs-comment">//call(api.getList(action.name)); 函数和参数分开传</span><br>      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">yield</span> <span class="hljs-title function_">put</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;setRoomList&#x27;</span>, <span class="hljs-attr">data</span>: res.<span class="hljs-property">data</span> &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">yield</span> <span class="hljs-title function_">put</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;接口报错&#x27;</span> &#125;)<br>      &#125;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">setRoomList</span>(<span class="hljs-params">state, action</span>) &#123;<br>      state.<span class="hljs-property">roomList</span> = action.<span class="hljs-property">data</span><br>      <span class="hljs-keyword">return</span> state <span class="hljs-comment">// 必须有返回值</span><br>    &#125;,<br>    <span class="hljs-title function_">error</span>(<span class="hljs-params">state, err</span>) &#123;<br>      <span class="hljs-comment">// 应用ui库中的提示组件</span><br>      <span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fail</span>(err, <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">return</span> state<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="在-jsx-中调用-dva，类似于-reducer"><a href="#在-jsx-中调用-dva，类似于-reducer" class="headerlink" title="在 jsx 中调用 dva，类似于 reducer"></a>在 jsx 中调用 dva，类似于 reducer</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dva&#x27;</span> <span class="hljs-comment">//引入dva</span><br><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params">props: any</span>) &#123;<br>  <span class="hljs-keyword">const</span> [roomType, setRoomType] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;shops&#x27;</span>)<br>  <span class="hljs-keyword">const</span> &#123; roomList &#125; = props.<span class="hljs-property">home</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    props.<span class="hljs-title function_">GET_ROOM_LIST</span>(roomType) <span class="hljs-comment">//axios请求</span><br>  &#125;, [roomType])<br>  <span class="hljs-comment">// roomType商铺-shops 写字楼-office 团购-group</span><br>  <span class="hljs-comment">// 新房-house 二手-second  出租-rental</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">target</span> &#125;) =&gt;</span> &#123;</span><br><span class="language-xml">          setRoomType(target.value)</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shops&quot;</span>&gt;</span>商铺<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;office&quot;</span>&gt;</span>写字楼<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;group&quot;</span>&gt;</span>团购<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      &#123;roomList.map((item: any) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;item.img&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span></span><br><span class="language-xml">            &#123;item.title&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        )</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStatetoprops</span> = (<span class="hljs-params">state: any</span>) =&gt; (&#123;<br>  ...state, <span class="hljs-comment">//会挂载到props上</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> actionCreater = &#123;<br>  <span class="hljs-comment">//会挂载到props上</span><br>  <span class="hljs-attr">GET_ROOM_LIST</span>: <span class="hljs-function">(<span class="hljs-params">payload: any</span>) =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;home/GET_ROOM_LIST&#x27;</span>, payload &#125;),<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapStatetoprops, actionCreater)(<span class="hljs-title class_">Home</span>) <span class="hljs-comment">//类似于reducer</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>百度地图API（地图找房案例）</title>
    <link href="/2022/05/30/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI/"/>
    <url>/2022/05/30/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI/</url>
    
    <content type="html"><![CDATA[<h1 id="百度地图-API（地图找房案例）"><a href="#百度地图-API（地图找房案例）" class="headerlink" title="百度地图 API（地图找房案例）"></a>百度地图 API（地图找房案例）</h1><h2 id="1-申请-百度地图开发平台开发者"><a href="#1-申请-百度地图开发平台开发者" class="headerlink" title="1.申请 百度地图开发平台开发者"></a>1.申请 百度地图开发平台开发者</h2><p><strong>umi 开发</strong></p><p><strong>依赖：</strong>控制台申请密钥</p><p>​ 服务器代理链家</p><p><strong>配置组件根文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//page/document.ejs</span><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script type=&quot;text/javascript&quot;<br>        src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=控制台密钥&quot;&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        window.BMap = BMap;//将实例挂载到window，方便在组件中获取实例<br>    &lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>服务器代理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-string">&#x27;/proxyApi&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;https://map.ke.com&#x27;</span>,<span class="hljs-comment">//链家</span><br>      <span class="hljs-comment">// pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;,</span><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="2-创建组件"><a href="#2-创建组件" class="headerlink" title="2.创建组件"></a>2.创建组件</h2><h3 id="流程：初始化地图》"><a href="#流程：初始化地图》" class="headerlink" title="流程：初始化地图》"></a>流程：初始化地图》</h3><ol><li>从 window 取出实例，初始化地图，允许滚动</li><li>获取当前位置</li><li>调用链家获取是遮盖物数据并添加遮罩物</li><li>划入遮罩物显示区域，点击遮罩物进入下一级</li></ol><p><strong>需要封装的函数</strong></p><ul><li>通过缩放倍数获取层级函数</li><li>调接口获取数据函数</li><li>添加遮罩物函数</li></ul><p>​</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./map.less&#x27;</span><br><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Map</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">BMap</span> = (<span class="hljs-variable language_">window</span> <span class="hljs-keyword">as</span> any).<span class="hljs-property">BMap</span>;<br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&#x27;mapbox&#x27;</span>, &#123; <span class="hljs-attr">minZoom</span>: <span class="hljs-number">12</span> &#125;)<br>        map.<span class="hljs-title function_">enableScrollWheelZoom</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 允许滚轮缩放</span><br>        <span class="hljs-comment">// 获取用户当前位置</span><br>        <span class="hljs-keyword">var</span> geolocation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Geolocation</span>();<br>        geolocation.<span class="hljs-title function_">getCurrentPosition</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">r</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getStatus</span>() === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 0 成功</span><br>                <span class="hljs-keyword">var</span> mk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Marker</span>(r.<span class="hljs-property">point</span>);<br>                map.<span class="hljs-title function_">addOverlay</span>(mk);<br>                map.<span class="hljs-title function_">panTo</span>(r.<span class="hljs-property">point</span>); <span class="hljs-comment">// 获取中心点</span><br>                <span class="hljs-comment">// 设置地图中心点</span><br>                map.<span class="hljs-title function_">centerAndZoom</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Point</span>(r.<span class="hljs-property">point</span>.<span class="hljs-property">lng</span>, r.<span class="hljs-property">point</span>.<span class="hljs-property">lat</span>), <span class="hljs-number">12</span>); <span class="hljs-comment">// 初始化地图,设置中心点坐标和地图级别 zoom</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;获取位置失败&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getStatus</span>())<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 获取第一次label 区</span><br>        <span class="hljs-title function_">getBubblelistFun</span>(<span class="hljs-title function_">getGroupTypeByZoom</span>(map), map)<br>    &#125;, [])<br><span class="hljs-comment">//调接口函数</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getBubblelistFun</span> = (<span class="hljs-params">type, map</span>) =&gt; &#123;<br>        api.<span class="hljs-title function_">getBubblelist</span>(&#123;<br>            <span class="hljs-attr">cityId</span>: <span class="hljs-number">310000</span>,<br>            <span class="hljs-attr">dataSource</span>: <span class="hljs-string">&quot;ESF&quot;</span>,<br>            <span class="hljs-attr">condition</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">groupType</span>: type, <span class="hljs-comment">// district bizcircle community</span><br>            <span class="hljs-attr">maxLatitude</span>: <span class="hljs-string">&quot;31.265433198546813&quot;</span>,<br>            <span class="hljs-attr">minLatitude</span>: <span class="hljs-string">&quot;31.162528491379792&quot;</span>,<br>            <span class="hljs-attr">maxLongitude</span>: <span class="hljs-string">&quot;121.64302922952635&quot;</span>,<br>            <span class="hljs-attr">minLongitude</span>: <span class="hljs-string">&quot;121.4777410156904&quot;</span><br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res: any</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">addLabel</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">bubbleList</span>, map)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">//添加遮罩物函数</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addLabel</span> = (<span class="hljs-params">list: [], map</span>) =&gt; &#123;<br>        list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item: any</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">var</span> opts = &#123;<br>                <span class="hljs-attr">position</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Point</span>(item.<span class="hljs-property">longitude</span>, item.<span class="hljs-property">latitude</span>), <span class="hljs-comment">// 指定文本标注所在的地理位置</span><br>                <span class="hljs-attr">offset</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Size</span>(<span class="hljs-number">30</span>, -<span class="hljs-number">30</span>) <span class="hljs-comment">// 设置文本偏移量</span><br>            &#125;;<br>            <span class="hljs-comment">// 创建文本标注对象</span><br>            <span class="hljs-keyword">var</span> label = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Label</span>(<span class="hljs-string">`</span><br><span class="hljs-string">                &lt;div&gt;</span><br><span class="hljs-string">                    <span class="hljs-subst">$&#123;item.name&#125;</span></span><br><span class="hljs-string">                    &lt;div&gt;<span class="hljs-subst">$&#123;item.countStr&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">                    &lt;div&gt;<span class="hljs-subst">$&#123;item.desc&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">                &lt;/div&gt;</span><br><span class="hljs-string">            `</span>, opts);<br>            <span class="hljs-comment">// 自定义文本标注样式</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">getGroupTypeByZoom</span>(map) === <span class="hljs-string">&#x27;district&#x27;</span> || <span class="hljs-title function_">getGroupTypeByZoom</span>(map) === <span class="hljs-string">&#x27;bizcircle&#x27;</span>) &#123;<br>                label.<span class="hljs-title function_">setStyle</span>(&#123;<br>                    <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;84px&#x27;</span>,<br>                    <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;84px&#x27;</span>,<br>                    <span class="hljs-attr">textAlign</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>                    <span class="hljs-attr">borderRadius</span>: <span class="hljs-string">&#x27;50%&#x27;</span>,<br>                    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>                    <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;10px&#x27;</span>,<br>                    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;16px&#x27;</span>,<br>                    <span class="hljs-attr">fontFamily</span>: <span class="hljs-string">&#x27;微软雅黑&#x27;</span><br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                label.<span class="hljs-title function_">setStyle</span>(&#123;<br>                    <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;84px&#x27;</span>,<br>                    <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;84px&#x27;</span>,<br>                    <span class="hljs-attr">textAlign</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>                    <span class="hljs-attr">borderRadius</span>: <span class="hljs-string">&#x27;50%&#x27;</span>,<br>                    <span class="hljs-attr">background</span>: <span class="hljs-string">&quot;blue&quot;</span>,<br>                    <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;10px&#x27;</span>,<br>                    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;16px&#x27;</span>,<br>                    <span class="hljs-attr">fontFamily</span>: <span class="hljs-string">&#x27;微软雅黑&#x27;</span><br>                &#125;);<br>            &#125;<br>            <span class="hljs-comment">// 划入添加覆盖物</span><br>            label.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">var</span> hole = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Polygon</span>(item.<span class="hljs-property">border</span>, &#123;<br>                    <span class="hljs-attr">fillColor</span>: <span class="hljs-string">&#x27;blue&#x27;</span>,<br>                    <span class="hljs-attr">fillOpacity</span>: <span class="hljs-number">0.2</span><br>                &#125;);<br>                hole[<span class="hljs-string">&#x27;type&#x27;</span>] = <span class="hljs-number">123</span><br>                map.<span class="hljs-title function_">addOverlay</span>(hole);<br>            &#125;)<br>            <span class="hljs-comment">// 划出删除覆盖物</span><br>            label.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseout&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-comment">// map.removeOverlay();</span><br>                <span class="hljs-keyword">var</span> allOverlay = map.<span class="hljs-title function_">getOverlays</span>();<br>                <span class="hljs-comment">//循坏所有点</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; allOverlay.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (allOverlay[i].<span class="hljs-property">type</span> === <span class="hljs-number">123</span>) &#123;<br>                        map.<span class="hljs-title function_">removeOverlay</span>(allOverlay[i]);<br>                    &#125;<br>                &#125;<br>            &#125;)<br>            <span class="hljs-comment">// 点击事件</span><br>            label.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">getGroupTypeByZoom</span>(map) === <span class="hljs-string">&#x27;community&#x27;</span>) &#123;<br>                    <span class="hljs-comment">// 如果已经是第三次 则不再请求中心点 和放大地图 而是直接获取房屋列表</span><br>                    <span class="hljs-title function_">getHouseListFun</span>(item)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 获取当前区域的中心点</span><br>                    <span class="hljs-title function_">getCenterFun</span>(item.<span class="hljs-property">id</span>, <span class="hljs-title function_">getGroupTypeByZoom</span>(map), map)<br>                    <span class="hljs-comment">// 放大地图</span><br>                    <span class="hljs-comment">// 获取第二层的 label节点</span><br>                &#125;<br><br>            &#125;)<br>            label.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getGroupTypeByZoom</span>(map),<span class="hljs-string">&quot;123&quot;</span>)<br>       &#125;)<br>            map.<span class="hljs-title function_">addOverlay</span>(label); <span class="hljs-comment">// 加入地图</span><br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前区域中心点</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCenterFun</span> = (<span class="hljs-params">groupId: any, groupType: any, map: any</span>) =&gt; &#123;<br>        api.<span class="hljs-title function_">getCenter</span>(&#123;<br>            <span class="hljs-attr">cityId</span>: <span class="hljs-number">310000</span>,<br>            <span class="hljs-attr">dataSource</span>: <span class="hljs-string">&#x27;ESF&#x27;</span>,<br>            <span class="hljs-attr">condition</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            groupId,<br>            groupType,<br>            <span class="hljs-attr">lngWidth</span>: <span class="hljs-number">0.16528821383594483</span>,<br>            <span class="hljs-attr">latHeight</span>: <span class="hljs-number">0.10298347035160615</span><br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res: any</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;center&#x27;</span>)<br>            map.<span class="hljs-title function_">centerAndZoom</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BMap</span>.<span class="hljs-title class_">Point</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">lng</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">lat</span>), <span class="hljs-title function_">getGroupTypeByZoom</span>(map) === <span class="hljs-string">&#x27;district&#x27;</span> ? <span class="hljs-number">15</span> : <span class="hljs-number">20</span>); <span class="hljs-comment">// 初始化地图,设置中心点坐标和地图级别 zoom</span><br>            <span class="hljs-comment">// 在渲染第二层数据前 清空第一层数据</span><br>            <span class="hljs-keyword">var</span> allOverlay = map.<span class="hljs-title function_">getOverlays</span>();<br>            <span class="hljs-comment">//循坏所有点</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; allOverlay.<span class="hljs-property">length</span>; i++) &#123;<br>                map.<span class="hljs-title function_">removeOverlay</span>(allOverlay[i]);<br>            &#125;<br>            <span class="hljs-title function_">getBubblelistFun</span>(<span class="hljs-title function_">getGroupTypeByZoom</span>(map), map); <span class="hljs-comment">// 获取第二层的label</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getGroupTypeByZoom</span> = (<span class="hljs-params">map</span>) =&gt; &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">ZoomNum</span> = map.<span class="hljs-title function_">getZoom</span>(); <span class="hljs-comment">// 地图缩放倍数</span><br>        <span class="hljs-comment">//  bizcircle community 根据zoom动态返回 groupType</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">ZoomNum</span> &lt;= <span class="hljs-number">12</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;district&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">ZoomNum</span> &gt;= <span class="hljs-number">13</span> &amp;&amp; <span class="hljs-title class_">ZoomNum</span> &lt; <span class="hljs-number">17</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;bizcircle&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">ZoomNum</span> &gt;= <span class="hljs-number">17</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;community&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 获取房屋列表</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getHouseListFun</span> = (<span class="hljs-params">item</span>) =&gt; &#123;<br>        api.<span class="hljs-title function_">getHouseList</span>(&#123;<br>            <span class="hljs-attr">cityId</span>: <span class="hljs-number">310000</span>,<br>            <span class="hljs-attr">dataSource</span>: <span class="hljs-string">&#x27;ESF&#x27;</span>,<br>            <span class="hljs-attr">curPage</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">condition</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">resblockId</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">maxLatitude</span>: <span class="hljs-number">31.36005675023785</span>,<br>            <span class="hljs-attr">minLatitude</span>: <span class="hljs-number">31.33436724589974</span>,<br>            <span class="hljs-attr">maxLongitude</span>: <span class="hljs-number">121.28735072672941</span>,<br>            <span class="hljs-attr">minLongitude</span>: <span class="hljs-number">121.24602867327043</span><br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res: any</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        &#125;)<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;Map&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mapbox&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>求职之路</title>
    <link href="/2022/05/30/%E6%B1%82%E8%81%8C%E4%B9%8B%E8%B7%AF/"/>
    <url>/2022/05/30/%E6%B1%82%E8%81%8C%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="求职之路"><a href="#求职之路" class="headerlink" title="求职之路"></a>求职之路</h1><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><h4 id="讲讲js数据类型？基本和引用的区别？symbol和bigint讲一讲应用场景？"><a href="#讲讲js数据类型？基本和引用的区别？symbol和bigint讲一讲应用场景？" class="headerlink" title="讲讲js数据类型？基本和引用的区别？symbol和bigint讲一讲应用场景？"></a>讲讲<code>js数据类型</code>？基本和引用的区别？<code>symbol</code>和<code>bigint</code>讲一讲应用场景？</h4><p><strong>基本数据类型：</strong>Boolean、Number、String、undefined、Null、Symbol (ES6 新增，表示独一无二的值)、bigint(表示任意大的整数)</p><p><strong>引用数据类型</strong>：Object、Array、Function</p><p><strong>区别：</strong></p><p>存储：基本类型存于栈、引用类型存于堆</p><p>复制变量：基本类型直接复制值、引用类型：复制指针共享内存</p><p>传递参数：基本类型直接传递值、引用类型：传递指针</p><p>检测类型：基本类型 typeof 返回类型，引用类型：instanceof 返回布尔值</p><p><strong>symbol：独一无二的值创建值的时候不用使用 new</strong></p><p><strong>bigint：它可以用来表示任意精度的整数值。可以用来“<a href="https://developer.twitter.com/en/docs/basics/twitter-ids">超大的整数形式的 ID</a>“和“<a href="https://github.com/nodejs/node/pull/20220">高精度时间戳</a>“</strong></p></li><li><p>实现一个克隆函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">Obj</span>) &#123;<br>  <span class="hljs-keyword">var</span> buf<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Obj</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>    buf = []<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-title class_">Obj</span>.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">while</span> (i--) &#123;<br>      buf[i] = <span class="hljs-title function_">clone</span>(<span class="hljs-title class_">Obj</span>[i])<br>    &#125;<br>    <span class="hljs-keyword">return</span> buf<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Obj</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) &#123;<br>    buf = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> <span class="hljs-title class_">Obj</span>) &#123;<br>      buf[k] = <span class="hljs-title function_">clone</span>(<span class="hljs-title class_">Obj</span>[k])<br>    &#125;<br>    <span class="hljs-keyword">return</span> buf<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Obj</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="判断数据类型的方法？instanceof原理-判断空对象？-typof-null？typeof-NaN？"><a href="#判断数据类型的方法？instanceof原理-判断空对象？-typof-null？typeof-NaN？" class="headerlink" title="判断数据类型的方法？instanceof原理?判断空对象？ typof null？typeof NaN？"></a>判断数据类型的方法？<code>instanceof</code>原理?判断<code>空对象</code>？ <code>typof null</code>？<code>typeof NaN</code>？</h4><p>typeof：判断基本类型比引用类型准确，返回字符串</p><p>instanceof：判断引用类型准确，返回布尔值</p><p>instanceof 原理：通过查找变量的 prototype 指向的对象（通过原型链）</p><p>typeof null 返回 object</p><p>typeof nan 返回 number</p></li><li><h4 id="var-let-const-区别？暂时性死区？块级作用域？const-a-a-x-1-能不能修改？"><a href="#var-let-const-区别？暂时性死区？块级作用域？const-a-a-x-1-能不能修改？" class="headerlink" title="var/let/const 区别？暂时性死区？块级作用域？const a = {}; a.x = 1 能不能修改？"></a>var/let/const 区别？<code>暂时性死区</code>？<code>块级作用域</code>？const a = {}; a.x = 1 能不能修改？</h4><p><strong>var</strong>：函数作用域存在变量提升</p><p>**let:**块级作用域有暂时性死区</p><p><strong>const：</strong>块级作用域有暂时性死区，一旦声明无法修改</p><p>可以修改因为 a 是一个引用类型的对象，对象是根据引用地址来修改的。</p></li><li><h4 id="说说你对函数式编程的理解？函数柯里化的理解？平时的使用场景？"><a href="#说说你对函数式编程的理解？函数柯里化的理解？平时的使用场景？" class="headerlink" title="说说你对函数式编程的理解？函数柯里化的理解？平时的使用场景？"></a>说说你对<code>函数式编程</code>的理解？<code>函数柯里化</code>的理解？平时的使用场景？</h4><p><strong>函数式编程的特点：</strong>函数是一等公民跟其它的数据类型一样处于平等地位，可以赋值给其他变量，可以作为参数传入另一个函数，也可以作为别的函数的返回值。、函数是纯函数</p><p><strong>函数柯里化：</strong>指的是将能够接收多个参数的函数转化为接收单一参数的函数，（并且返回接收余下参数且返回结果的新函数的技术。）主要作用和特点就是参数复用、提前返回和延迟执行。</p></li><li><h4 id="防抖、节流的含义，使用场景？手写一下？"><a href="#防抖、节流的含义，使用场景？手写一下？" class="headerlink" title="防抖、节流的含义，使用场景？手写一下？"></a><code>防抖、节流</code>的含义，使用场景？<code>手写一下</code>？</h4><p><strong>防抖：所谓防抖，就是指触发事件后 n 秒后才执行函数，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</strong></p><p><strong>节流：就是指连续触发事件但是在 n 秒中只执行一次函数。 节流会稀释函数的执行频率。</strong></p><p>应用场景：模糊搜索、页面滚动</p></li><li><h4 id="call、apply、bind-区别？bind实现？bind-之后还能修改-this-指向吗？为什么？"><a href="#call、apply、bind-区别？bind实现？bind-之后还能修改-this-指向吗？为什么？" class="headerlink" title="call、apply、bind 区别？bind实现？bind 之后还能修改 this 指向吗？为什么？"></a>call、apply、bind 区别？<code>bind实现</code>？bind 之后还能修改 this 指向吗？为什么？</h4><p><strong>call</strong>：必须是被函数调用，第一个参数，是一个对象，如果不传默认为 window，会立即执行</p><p><strong>apply</strong>：必须是被函数调用，第一个参数的规则与 call 一致，第二个参数，必须是数组或者类数组，会立即执行</p><p><strong>bind</strong>：bind 方法的返回值是函数，并且需要稍后调用，才会执行</p><p>bind 之后不能再修改 this 指向，因为 bind 返回的函数里 this 已经绑定好了，再用 call 或者 apply 已经没有意义了</p></li><li><h4 id="闭包概念，最主要的还是问闭包的场景？"><a href="#闭包概念，最主要的还是问闭包的场景？" class="headerlink" title="闭包概念，最主要的还是问闭包的场景？"></a>闭包概念，最主要的还是问<code>闭包的场景</code>？</h4><p><strong>闭包</strong>是指有权访问另一个函数作用域中的变量的函数。</p><p><strong>场景</strong>：为节点循环绑定 click 事件、延续局部变量的寿命、对结果进行缓存</p></li><li><h4 id="用es5实现es6类的继承？各种继承问的挺多的"><a href="#用es5实现es6类的继承？各种继承问的挺多的" class="headerlink" title="用es5实现es6类的继承？各种继承问的挺多的"></a>用<code>es5实现es6</code>类的继承？各种继承问的挺多的</h4><p><strong>原型链继承 ：</strong></p><p> 核心：将父类的实例作为子类的原型</p><p> 优点：父类方法可以复用</p><p> 缺点：</p><p> 父类的引用属性会被所有子类实例共享</p><p> 子类构建实例时不能向父类传递参数</p><h5 id="构造函数继承-："><a href="#构造函数继承-：" class="headerlink" title="构造函数继承 ："></a>构造函数继承 ：</h5><p> 核心：将父类构造函数的内容复制给了子类的构造函数。这是所有继承中唯一一个不涉及到 prototype 的继承。</p><p> 优点：和原型链继承完全反过来。</p><p> 父类的引用属性不会被共享</p><p> 子类构建实例时可以向父类传递参数</p><p> 缺点：父类的方法不能复用，子类实例的方法每次都是单独创建的。</p><p><strong>组合继承 ：</strong></p><p> 核心：原型式继承和构造函数继承的组合，兼具了二者的优点。</p><p> 优点：父类的方法可以被复用</p><p> 父类的引用属性不会被共享</p><p> 子类构建实例时可以向父类传递参数</p><p> 缺点：<br>调用了两次父类的构造函数，第一次给子类的原型添加了父类的 name, arr 属性，第二次又给子类的构造函数添加了父类的 name, arr 属性，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费。</p></li><li><h4 id="深拷贝与浅拷贝？常用方法？手写一个深拷贝函数？"><a href="#深拷贝与浅拷贝？常用方法？手写一个深拷贝函数？" class="headerlink" title="深拷贝与浅拷贝？常用方法？手写一个深拷贝函数？"></a>深拷贝与浅拷贝？常用方法？手写一个<code>深拷贝函数</code>？</h4></li></ol><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">let</span> cloneObj<br>  <span class="hljs-comment">// 判断当输入的数据是简单数据类型时，直接复制</span><br>  <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    cloneObj = obj<br>  &#125;<br>  <span class="hljs-comment">// 当输入的数据是对象或者数组时</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 检测输入的数据是数组还是对象</span><br>    cloneObj = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj) ? [] : &#123;&#125;<br><br>    <span class="hljs-comment">// 变量数据对象</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-comment">// 判断对象是否存在key属性</span><br>      <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>        <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; <span class="hljs-keyword">typeof</span> obj[key] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>          <span class="hljs-comment">// 若当前元素类型为对象时，递归调用</span><br>          cloneObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key])<br>        &#125;<br>        <span class="hljs-comment">// 若当前元素类型为基本数据类型</span><br>        <span class="hljs-keyword">else</span> &#123;<br>          cloneObj[key] = obj[key]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cloneObj<br>&#125;<br><br><span class="hljs-comment">// 测试用例</span><br><span class="hljs-title function_">deepClone</span>(&#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">y</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>],<br>  <span class="hljs-attr">z</span>: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="11"><li><h4 id="说说你知道的-JavaScript设计模式？观察者和发布订阅的区别？手写一个发布订阅？我真的写了"><a href="#说说你知道的-JavaScript设计模式？观察者和发布订阅的区别？手写一个发布订阅？我真的写了" class="headerlink" title="说说你知道的 JavaScript设计模式？观察者和发布订阅的区别？手写一个发布订阅？我真的写了"></a>说说你知道的 JavaScript<code>设计模式</code>？观察者和发布订阅的区别？<code>手写</code>一个发布订阅？我真的写了</h4><p>参见：<a href="https://juejin.cn/post/6844903503266054157#heading-4">https://juejin.cn/post/6844903503266054157#heading-4</a></p><p><strong>单例模式</strong>:保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。</p><p><strong>代理模式</strong>：为一个对象提供一个代用品或占位符，以便控制对它的访问。</p><p><strong>观察者和发布订阅的区别</strong>：观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。</p><p>发布-订阅模式，在发布者和订阅者之间存在第三个组件，称为消息代理或调度中心或中间件，它维持着发布者和订阅者之间的联系</p></li><li><h4 id="说说对你对-JavaScript异步编程的理解？"><a href="#说说对你对-JavaScript异步编程的理解？" class="headerlink" title="说说对你对 JavaScript异步编程的理解？"></a>说说对你对 JavaScript<code>异步编程</code>的理解？</h4><p>把 eventloop 和异步解决方案都说上</p></li><li><h4 id="ES-Module与-CommonJS-模块的差异？两者互相加载的方式？一般会扯到-AMD"><a href="#ES-Module与-CommonJS-模块的差异？两者互相加载的方式？一般会扯到-AMD" class="headerlink" title="ES Module与 CommonJS 模块的差异？两者互相加载的方式？一般会扯到 AMD"></a><code>ES Module</code>与 <code>CommonJS</code> 模块的差异？两者互相加载的方式？一般会扯到 AMD</h4><p>AMD 和 CMD：代码模块化的两种形式，AMD 推崇依赖前置，CMD 推崇就近依赖，AMD 是加载完立即执行，CMD 是延迟执行</p><table><thead><tr><th></th><th>引入</th><th>抛出</th></tr></thead><tbody><tr><td>CommonJS</td><td>require</td><td>module.export 或 exports</td></tr><tr><td>ES Module</td><td>import</td><td>export default 或 export</td></tr></tbody></table><h4 id=""><a href="#" class="headerlink" title=""></a></h4></li><li><h4 id="Promise-all、race、allSettled-概念、手写？很多手写题都会用到，比如用-promise-实现请求并发个数限制？"><a href="#Promise-all、race、allSettled-概念、手写？很多手写题都会用到，比如用-promise-实现请求并发个数限制？" class="headerlink" title="Promise.all、race、allSettled 概念、手写？很多手写题都会用到，比如用 promise 实现请求并发个数限制？"></a><code>Promise</code>.all、race、allSettled 概念、手写？很多手写题都会用到，比如用 promise 实现请求<code>并发个数</code>限制？</h4><p>很久之前解决异步需要使用回调函数会引起回调地狱，promise 解决了回调地狱。</p><p>promise.all 全部成功返回成功，有一个返回失败返回第一个失败（剩下的不执行）</p><p>promise.race 多个 Promise 任务同时执行，返回最先执行结束的 Promise 任务的结果，不管这个 Promise 结果是成功还是失败。</p><p><strong>promise.allSettled</strong>:</p><p>该 Promise.allSettled()方法返回一个在所有给定的 promise 已被决议或被拒绝后决议的 promise，并带有一个对象数组，每个对象 表示对应的 promise 结果。</p><p>如果我们请求多个接口需要统计错误的次数，就可以用到此方法.</p></li><li><h4 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h4><p><strong>事件模型分为：dom0级和dom2级</strong></p><p><strong>dom0</strong></p><p>​    DOM0级事件模型是早期的事件模型，所有的浏览器都是支持的。</p><p>dom0中，一个dom对象只能注册一个同类型的函数，因为注册多个同类型的函数的话，就会发生覆盖，之前注册的函数就会无效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> click = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;click&#x27;</span>);<br>click.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;you click the first function&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>dom2</strong></p><p>​    这种事件模型是捕获和冒泡模型.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;html&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br>&lt;/html&gt;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">那么现在是事件流程是</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">首先执行捕获流程document -&gt; html -&gt; body -&gt;button</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">然后执行冒泡流程button -&gt; body -&gt; html -&gt; document</span><br><span class="hljs-comment">*/</span><br>可以通过addEventListener的第三个参数阻止冒泡默认为<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><h4 id="尾递归调用"><a href="#尾递归调用" class="headerlink" title="尾递归调用"></a>尾递归调用</h4><p><strong>尾调用</strong>：在函数最有一部，调用另外一个函数并不做任何操作；</p><p><strong>为什么要使用尾调用</strong></p><p>函数调用会在内存形成一个”调用记录”，又称”调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈，以此类推。所有的调用记录，就形成一个<a href="http://zh.wikipedia.org/wiki/%E8%B0%83%E7%94%A8%E6%A0%88">“调用栈”</a>（call stack）。</p><p>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。</p><p>这就叫做”尾调用优化”（Tail call optimization），即只保留内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。这就是”尾调用优化”的意义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//正确尾调用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>(x);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">m</span>(x)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">n</span>(x);<br>&#125;<br><br><span class="hljs-comment">//错误尾调用（不是最后一步调用）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>)&#123;<br>  <span class="hljs-keyword">let</span> y = <span class="hljs-title function_">g</span>(x);<br>  <span class="hljs-keyword">return</span> y;<br>&#125;<br><span class="hljs-comment">//最后一步调用却进行了其他操作</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>(x) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>尾递归</strong></p><p>递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生”栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生”栈溢出”错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//非尾递归阶乘（事件复杂度为O(n)）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> n * <span class="hljs-title function_">factorial</span>(n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-title function_">factorial</span>(<span class="hljs-number">5</span>) <span class="hljs-comment">// 120</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//尾递归阶乘（事件复杂度为O(1)）</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n, total</span>) &#123;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> total;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">factorial</span>(n - <span class="hljs-number">1</span>, n * total);<br>&#125;<br><br><span class="hljs-title function_">factorial</span>(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 120</span><br></code></pre></td></tr></table></figure><p><strong>ES6的尾调用优化只在严格模式下开启，正常模式是无效的。</strong></p><p>这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p><ul><li><code>arguments</code>：返回调用时函数的参数。</li><li><code>func.caller</code>：返回调用当前函数的那个函数。</li></ul><p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p><p>参见：<a href="http://www.ruanyifeng.com/blog/2015/04/tail-call.html">http://www.ruanyifeng.com/blog/2015/04/tail-call.html</a></p></li></ol><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><ol><li><h4 id="css变量声明，scss变量声明"><a href="#css变量声明，scss变量声明" class="headerlink" title="css变量声明，scss变量声明"></a>css变量声明，scss变量声明</h4><p><strong>css变量</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">声明：必须使用伪类root，变量名要加--<br>//方法一<br><span class="hljs-selector-pseudo">:root</span>&#123;<br>      <span class="hljs-attr">--color</span>:<span class="hljs-number">#000</span>;<br>      <span class="hljs-attr">--w</span>:<span class="hljs-number">200px</span>;<br>&#125;<br>//方法二<br><span class="hljs-selector-class">.box</span>&#123;<br>      <span class="hljs-attr">--color</span>:red;<br>      <span class="hljs-attr">--w</span>:<span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-built_in">var</span>(--w);<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--color);<br>    &#125;<br>使用：放入<span class="hljs-selector-tag">var</span>（）中s<br><span class="hljs-selector-class">.box</span>&#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-built_in">var</span>(--w);<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--color);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>scss变量</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$border-color</span>:<span class="hljs-number">#aaa</span>; <span class="hljs-comment">//声明变量</span><br><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-variable">$border-width</span> solid <span class="hljs-variable">$border-color</span>; <span class="hljs-comment">//使用变量</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="rem移动端适配，rem何em的区别"><a href="#rem移动端适配，rem何em的区别" class="headerlink" title="rem移动端适配，rem何em的区别"></a>rem移动端适配，rem何em的区别</h4><p>rem：相对于根节点的fontsize</p><p>em：相对于父节点的fontsize</p></li><li><h4 id="水平垂直居中？兼容性？不知道宽高情况下？"><a href="#水平垂直居中？兼容性？不知道宽高情况下？" class="headerlink" title="水平垂直居中？兼容性？不知道宽高情况下？"></a>水平垂直<code>居中</code>？兼容性？<code>不知道宽高</code>情况下？</h4><p>水平居中：</p><p>行内居中：text-align:center;</p><p>flex 布局：display：flex；justify-content:center</p><p>块级（已设置 width）：margin 0 auto;</p><p>垂直居中：</p><p>行内：line-height：高度；</p><p>flex 布局：display：flex；aligin-items：center</p></li><li><h4 id="BFC-概念？作用？常用场景？"><a href="#BFC-概念？作用？常用场景？" class="headerlink" title="BFC 概念？作用？常用场景？"></a>BFC 概念？作用？<code>常用场景</code>？</h4><p>概念：块级格式化上下文；</p><p>作用：在这个范围内不影响范围外的布局，同时也不受外界的影响</p><p>生成：根元素</p><p>float 的值不为 none</p><p>overflow 的值不为 visible</p><p>display 的值为 inline-block、table-cell、table-caption、table</p><p>position 的值为 absolute 或 fixed</p><p>场景：防止 margin 重叠（塌陷）、清除内部浮动、自适应多栏布局</p></li><li><h4 id="Flex？注意flex：1的含义，一般会给你个场景题"><a href="#Flex？注意flex：1的含义，一般会给你个场景题" class="headerlink" title="Flex？注意flex：1的含义，一般会给你个场景题"></a>Flex？注意<code>flex：1</code>的含义，一般会给你个场景题</h4><p>flex 弹性盒布局 flex 为 1 时会将剩余的位置全占</p></li><li><h4 id="盒模型概念，如何切换盒模型？"><a href="#盒模型概念，如何切换盒模型？" class="headerlink" title="盒模型概念，如何切换盒模型？"></a><code>盒模型</code>概念，如何<code>切换</code>盒模型？</h4><p><strong>盒模型的组成：是由 content（内容区）、padding（填充区）、border（边框区）、margin（外边距区）这四个部分组成！</strong></p><p>盒模型分为标准和模型和怪异盒模型，可以通过 box-sizeing 来切换，当设置 padding 时标准盒模型会向外挤压，怪异盒模型向内挤压</p></li><li><h4 id="实现1px边框？1px-线条？"><a href="#实现1px边框？1px-线条？" class="headerlink" title="实现1px边框？1px 线条？"></a>实现<code>1px</code>边框？1px 线条？</h4><p>主要是通过给目标元素添加<code>position:relative</code>;</p><p>然后再用其伪类<code>:after</code>或者<code>:before</code>画一个 2 倍或者 3 倍宽高的元素;</p><p>然后给伪类元素画一个 1px 的边框;</p><p>通过<code>media query</code>决定缩放伪类元素到 1/2 或者 1/3;</p><p>给伪类元素增加<code>pointer-events: none;</code>, 这样伪类元素可以点击穿透, 也就是能看到, 但是不触发任何默认事件(click 等);</p></li><li><h4 id="伪类和伪元素区别？使用场景？"><a href="#伪类和伪元素区别？使用场景？" class="headerlink" title="伪类和伪元素区别？使用场景？"></a><code>伪类</code>和<code>伪元素</code>区别？使用场景？</h4><p><strong>伪类</strong>：其核心就是用来选择那些不能够被普通选择器选择的文档之外的元素，比如:hover。</p><p><strong>伪元素</strong>：其核心就是需要创建通常不存在于文档中的元素，比如::before。</p></li></ol><h2 id="Http-amp-amp-浏览器"><a href="#Http-amp-amp-浏览器" class="headerlink" title="Http &amp;&amp; 浏览器"></a>Http &amp;&amp; 浏览器</h2><ol><li><h4 id="浏览器缓存？http-缓存？-主要要讲一讲强缓存、协商缓存、preload、prefetch、Service-Worker-等，304的含义？协商缓存e-tag是怎么生成的？Last-Modified是基于什么生成的？两者对比一下？优先级哪个高？"><a href="#浏览器缓存？http-缓存？-主要要讲一讲强缓存、协商缓存、preload、prefetch、Service-Worker-等，304的含义？协商缓存e-tag是怎么生成的？Last-Modified是基于什么生成的？两者对比一下？优先级哪个高？" class="headerlink" title="浏览器缓存？http 缓存？ 主要要讲一讲强缓存、协商缓存、preload、prefetch、Service Worker 等，304的含义？协商缓存e-tag是怎么生成的？Last-Modified是基于什么生成的？两者对比一下？优先级哪个高？"></a>浏览器<code>缓存</code>？http 缓存？ 主要要<code>讲一讲</code>强缓存、协商缓存、preload、prefetch、Service Worker 等，<code>304</code>的含义？协商缓存<code>e-tag</code>是怎么生成的？<code>Last-Modified</code>是基于什么生成的？两者对比一下？<code>优先级</code>哪个高？</h4><p><strong>浏览器缓存</strong>：当浏览器请求一个网站的时候，会加载各种各样的资源，比如：HTML 文档、图片、CSS 和 JS 等文件。对于一些不经常变的内容，浏览器会将他们保存在本地的文件中，下次访问相同网站的时候，直接加载这些资源，加速访问。</p><p><strong>浏览器缓存的好处</strong>：<strong>（1）减少页面加载时间；（2）减少服务器负载；</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text"><br>1）浏览器在加载资源时，先根据这个资源的一些http header判断它是否命中强缓存，**强缓存如果命中，浏览器直接从自己的缓存中读取资源，不会发请求到服务器**。比如：某个css文件，如果浏览器在加载它所在的网页时，这个css文件的缓存配置命中了强缓存，浏览器就直接从缓存中加载这个css，连请求都不会发送到网页所在服务器；<br><br>2）当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，**通过服务器端依据资源的另外一些http header验证这个资源是否命中协商缓存**，如果协商缓存命中，服务器会将这个请求返回，**但是不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源**，于是浏览器就又会从自己的缓存中去加载这个资源；<br><br>3）强缓存与协商缓存的共同点是：**如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据**；区别是：**强缓存不发请求到服务器，协商缓存会发请求到服务器**。<br><br>4）当协商缓存也没有命中的时候，浏览器直接从服务器加载资源数据。<br></code></pre></td></tr></table></figure><p><strong>强缓存</strong>:<strong>利用 Expires 或者 Cache-Control 这两个 http response header 实现的，它们都用来表示资源在客户端缓存的有效期</strong>。<strong>返回的 HTTP 状态为 200,network 里面 size 会显示为 from cache</strong></p><p><strong>协商缓存是利用的是【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对 Header 来管理的</strong>。<strong>请求响应返回的 http 状态为 304 并且会显示一个 Not Modified 的字符串</strong></p><p>参见:<a href="https://juejin.cn/post/6844903672556552205#heading-5">https://juejin.cn/post/6844903672556552205#heading-5</a></p></li><li><h4 id="什么是跨域？什么情况下会跨域？浏览器根据什么字段判断是否允许跨域？跨域的解决方案有哪些？options请求了解过吗？说说-CORS-中的简单请求和复杂请求？form表单提交会跨域吗？"><a href="#什么是跨域？什么情况下会跨域？浏览器根据什么字段判断是否允许跨域？跨域的解决方案有哪些？options请求了解过吗？说说-CORS-中的简单请求和复杂请求？form表单提交会跨域吗？" class="headerlink" title="什么是跨域？什么情况下会跨域？浏览器根据什么字段判断是否允许跨域？跨域的解决方案有哪些？options请求了解过吗？说说 CORS 中的简单请求和复杂请求？form表单提交会跨域吗？"></a>什么是<code>跨域</code>？什么情况下会跨域？浏览器根据什么<code>字段</code>判断是否允许跨域？跨域的<code>解决方案</code>有哪些？<code>options</code>请求了解过吗？说说 CORS 中的<code>简单请求</code>和<code>复杂请求</code>？<code>form表单提交</code>会跨域吗？</h4><p><strong>同源策略</strong>：域名、端口、协议。不符合同源策略就属于跨域。</p><p><strong>解决方案</strong>：</p><p> JSONP：利用标签可跨域的特性，听过传入回调实现跨域。</p><p> 优点：兼容性好</p><p> 缺点：只适用于 get 请求</p><p> cors：通过添加别的请求头实现</p><p> 优点：支持多种请求方式</p><p> 针对非简单请求的 CORS 请求，会在正式通信之前，额外增加一次 HTTP 请求，称为”预检”请求</p></li><li><h4 id="讲一讲浏览器事件循环Event-Loop？node-事件循环描述一下？"><a href="#讲一讲浏览器事件循环Event-Loop？node-事件循环描述一下？" class="headerlink" title="讲一讲浏览器事件循环Event Loop？node 事件循环描述一下？"></a>讲一讲浏览器事件循环<code>Event Loop</code>？node <code>事件循环</code>描述一下？</h4><ul><li>所有同步任务都在主线程上执行，形成一个执行栈。</li><li>2、主线程之外，还存在一个“任务队列”，只要异步任务有了结果，就在“任务队列”里注册一个事件。</li><li>3、当执行栈中所有的任务都执行完毕（执行栈清空），系统会读取“任务队列”中的事件，对应事件的异步任务，进入结束等待状态，然后进入执行栈，开始执行。</li><li>4、主线程不断的重复第三步。</li></ul><p>这个主线程循环读取事件的运行机制，也被称作事件循环。</p></li><li><h4 id="http2有哪些新特性？http2还有哪些缺陷？http3的一些了解？"><a href="#http2有哪些新特性？http2还有哪些缺陷？http3的一些了解？" class="headerlink" title="http2有哪些新特性？http2还有哪些缺陷？http3的一些了解？"></a><code>http2</code>有哪些新特性？<code>http2</code>还有哪些缺陷？<code>http3</code>的一些了解？</h4><ul><li><p>http1.0： 每一个 http 请求消耗一个 tcp 连接，必须等待第一个 http request 处理完成后，才能进行下一次请求；</p></li><li><p>http1.1： 引入 keepalive 特性，允许多个 http request 使用同一个 tcp 连接。但是在接收 response 的时候，也必须是串行和有序的，即第一个 request 的 response 必须第一被就收完成，才能继续处理下一个 request 的 response，</p></li><li><p>http2：可以多个请求同时在一个 TCP 上发送;只维护一个 tcp 链接，就减少了 tcp 链接建立和断开的资源消耗。在 http1.1 中的使用资源的合并请求来减少 tcp 链接的优化就没有必要了。</p></li></ul><h4 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a><strong>新特性</strong></h4><p> <strong>使用了二进制分帧</strong></p><p>  http2.0 在应用层和传输层之间新增了一个二进制分帧层，从而达到在不改变 http 语义、http 方法、状态码、URI、首部字段等前提下，突破 http1.1 的一些性能限制，改变传输性能，降低延迟，提高性能。</p><p>原理：  在 HTTP2 中，应用层的数据是通过二进制帧来进行处理，将不同的请求拆成不同的 stream 进行处理，并使用 stream ID 进行标记，正式有了 stream id 来进行标记，才能确保不同类型的帧才能被有序的重组。</p><p> <strong>头部压缩</strong></p><p>http2.0 中，在客户端和服务端同时使用了首部表来进行跟踪和存储 header 的键值对。对相同的请求，就不需要在重新发送，在通信过程中，基本不会改变的字段，只需要进行一次传输。就相当于一个密码本一样，约定好”我想你了”代码为 01，”我也想你了”代码为 02。那跟女朋友千里传信的时候，只用发 01 就好啦。</p><p> <strong>多路复用</strong></p><p>所有就是请求的都是通过一个 TCP 连接并发完成。因为在多路复用之前所有的传输是基于基础文本的，在多路复用中是基于二进制数据帧的传输、消息、流，所以可以做到乱序的传输。多路复用对同一域名下所有请求都是基于流，所以不存在同域并行的阻塞。</p><p> <strong>请求优先级</strong></p><p>在 http2 中的流中有了优先级的概念，所以在每一个请求流中都会带一个 31bit 的优先值，0 表示优先级最高，2 的 31 次方减一最低。客户端明确请求资源的优先级，服务端可以根据这个优先级作为交互数据的依据。比如 css&gt;js&gt;png&gt;mp4，服务端按这个顺序返回就会更加有利于利用底层的连接，提高用户体验。当然这个也不是绝对的，绝对等待会造成对头阻塞的。</p><p> <strong>服务器推送</strong></p><p>HTTP 2.0 新增加服务器提示，可以先于客户端检测到将要请求的资源，提前通知客户端，服务器不发送所有资源的实体，只发送资源的 URL，客户端接到提示后会进行验证缓存，如果真需要这些资源，则正式发起请求（服务器主动更新静态资源）</p><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ol><li>如果有丢包请求会等待重传，阻塞后面的数据，</li><li>多路复用导致服务器压力上升，多路复用没有限制同时请求数。</li></ol><p>参见：<a href="https://blog.csdn.net/wangzizhizu/article/details/104876055">https://blog.csdn.net/wangzizhizu/article/details/104876055</a></p><h4 id="http3"><a href="#http3" class="headerlink" title="http3"></a>http3</h4><p>解决了 http2 多路复用存在的丢包问题</p></li><li><h4 id="从输入-URL-到页面加载完成的过程，一般要很详细的描述：包括DNS查询，缓存查询，3次握手，4次挥手，浏览器渲染进程等，面试官会从里面再挑几个问题深入问，比如为什么是-3-次握手-4-次挥手？渲染进程中的-GUI-渲染线程、JS-引擎线程、事件触发线程等等？可能会问到进程线程的区别？浏览器为什么是多进程？js-为什么是单线程？怎么支持多线程？等等"><a href="#从输入-URL-到页面加载完成的过程，一般要很详细的描述：包括DNS查询，缓存查询，3次握手，4次挥手，浏览器渲染进程等，面试官会从里面再挑几个问题深入问，比如为什么是-3-次握手-4-次挥手？渲染进程中的-GUI-渲染线程、JS-引擎线程、事件触发线程等等？可能会问到进程线程的区别？浏览器为什么是多进程？js-为什么是单线程？怎么支持多线程？等等" class="headerlink" title="从输入 URL 到页面加载完成的过程，一般要很详细的描述：包括DNS查询，缓存查询，3次握手，4次挥手，浏览器渲染进程等，面试官会从里面再挑几个问题深入问，比如为什么是 3 次握手 4 次挥手？渲染进程中的 GUI 渲染线程、JS 引擎线程、事件触发线程等等？可能会问到进程线程的区别？浏览器为什么是多进程？js 为什么是单线程？怎么支持多线程？等等"></a><code>从输入 URL 到页面加载完成的过程</code>，一般要很详细的描述：包括<code>DNS查询</code>，<code>缓存</code>查询，<code>3次握手</code>，<code>4次挥手</code>，浏览器<code>渲染进</code>程等，面试官会从里面再挑几个问题深入问，比如为什么是 3 次握手 4 次挥手？渲染进程中的 GUI 渲染线程、JS 引擎线程、事件触发线程等等？可能会问到进程线程的区别？浏览器为什么是多进程？js 为什么是单线程？怎么支持多线程？等等</h4><p><strong>解析 url</strong><br><strong>DNS 解析</strong></p><p><strong>TCP 连接</strong></p><p><strong>发送 http 请求服务器</strong></p><p><strong>接收请求服务器</strong></p><p><strong>响应 TCP 链接断开</strong></p><p><strong>浏览器解析资源</strong></p><p><strong>渲染页面</strong></p><p>参见:<a href="https://juejin.cn/post/6896844956284125191#heading-0">https://juejin.cn/post/6896844956284125191#heading-0</a></p></li><li><h4 id="https加密原理？主要是讲对称加密和非对称加密结合使用的一个过程。什么是中间人攻击？和-http-区别？"><a href="#https加密原理？主要是讲对称加密和非对称加密结合使用的一个过程。什么是中间人攻击？和-http-区别？" class="headerlink" title="https加密原理？主要是讲对称加密和非对称加密结合使用的一个过程。什么是中间人攻击？和 http 区别？"></a>https<code>加密原理</code>？主要是讲<code>对称加密</code>和<code>非对称加密</code>结合使用的一个过程。什么是<code>中间人攻击</code>？和 http 区别？</h4><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>HTTP 协议通过明文传输，是不安全的。于是，就在 HTTP 协议的基础上，进行了数据加密，也就诞生了 HTTPS 协议。注意，HTTPS 并不是一个新的协议，它只不过是在 HTTP 的基础上加了一层 传输层加密协议（TLS）</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>HTTPS 中的数据是通过对称加密的方式来加密的，而对称加密的密钥是由客户端生成的随机字符串来充当，再通过非对称加密的方式加密后传递到服务端。</p><h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><p>在服务端与客户端进行握手时，截获密钥，间人分别冒冲服务端和客户端跟彼此交互，就可以窃取信息了。</p><p>参见<a href="https://juejin.cn/post/6844903817956294670#heading-4">https://juejin.cn/post/6844903817956294670#heading-4</a></p></li></ol><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ol><li><h4 id="生命周期？那个生命周期可以获取到真实DOM？修改data里面的数据，会触发什么生命周期？"><a href="#生命周期？那个生命周期可以获取到真实DOM？修改data里面的数据，会触发什么生命周期？" class="headerlink" title="生命周期？那个生命周期可以获取到真实DOM？修改data里面的数据，会触发什么生命周期？"></a>生命周期？那个生命周期可以获取到<code>真实DOM</code>？<code>修改data</code>里面的数据，会触发什么生命周期？</h4></li><li><h4 id="组件-data-为什么是一个函数？"><a href="#组件-data-为什么是一个函数？" class="headerlink" title="组件 data 为什么是一个函数？"></a>组件 data 为什么是一个<code>函数</code>？</h4></li><li><h4 id="vue-组件通信？一般说了vuex，就会问-vuex-用法？action和mutations区别？实现原理等？"><a href="#vue-组件通信？一般说了vuex，就会问-vuex-用法？action和mutations区别？实现原理等？" class="headerlink" title="vue 组件通信？一般说了vuex，就会问 vuex 用法？action和mutations区别？实现原理等？"></a>vue 组件通信？一般说了<code>vuex</code>，就会问 vuex 用法？<code>action</code>和<code>mutations</code>区别？实现原理等？</h4></li><li><h4 id="vue-导航守卫，分全局和组件的，一般用于权限控制，这个就可能扯到项目中的一些鉴权问题。"><a href="#vue-导航守卫，分全局和组件的，一般用于权限控制，这个就可能扯到项目中的一些鉴权问题。" class="headerlink" title="vue 导航守卫，分全局和组件的，一般用于权限控制，这个就可能扯到项目中的一些鉴权问题。"></a>vue <code>导航守卫</code>，分全局和组件的，一般用于权限控制，这个就可能扯到项目中的一些<code>鉴权问题</code>。</h4></li><li><h4 id="nextTick-作用？实现原理？微任务向宏任务的降级处理，经常被问到说出几种宏任务，微任务。"><a href="#nextTick-作用？实现原理？微任务向宏任务的降级处理，经常被问到说出几种宏任务，微任务。" class="headerlink" title="$nextTick 作用？实现原理？微任务向宏任务的降级处理，经常被问到说出几种宏任务，微任务。"></a><code>$nextTick</code> 作用？实现原理？微任务向宏任务的<code>降级处理</code>，经常被问到说出几种宏任务，微任务。</h4></li><li><h4 id="vue响应式原理？基本都会问"><a href="#vue响应式原理？基本都会问" class="headerlink" title="vue响应式原理？基本都会问"></a><code>vue响应式原理</code>？基本都会问</h4></li><li><h4 id="vue-scoped属性作用？实现原理？"><a href="#vue-scoped属性作用？实现原理？" class="headerlink" title="vue scoped属性作用？实现原理？"></a>vue <code>scoped</code>属性作用？实现原理？</h4></li><li><h4 id="vue-router有几种模式？实现方式？"><a href="#vue-router有几种模式？实现方式？" class="headerlink" title="vue router有几种模式？实现方式？"></a>vue <code>router</code>有几种模式？实现方式？</h4></li><li><h4 id="key的作用？没有-key-的情况，vue-会怎么做？会引出-diff-的问题"><a href="#key的作用？没有-key-的情况，vue-会怎么做？会引出-diff-的问题" class="headerlink" title="key的作用？没有 key 的情况，vue 会怎么做？会引出 diff 的问题"></a><code>key</code>的作用？没有 key 的情况，vue 会怎么做？会引出 diff 的问题</h4></li><li><h4 id="vue-diff过程，和-react-diff-区别？"><a href="#vue-diff过程，和-react-diff-区别？" class="headerlink" title="vue diff过程，和 react diff 区别？"></a>vue <code>diff过程</code>，和 react diff 区别？</h4></li><li><h4 id="vue-2-x-defineProperty缺陷？业务代码里面怎么处理？-set原理？vue-是怎么重写数组方法的？考察你是不是真的看过源码"><a href="#vue-2-x-defineProperty缺陷？业务代码里面怎么处理？-set原理？vue-是怎么重写数组方法的？考察你是不是真的看过源码" class="headerlink" title="vue 2.x defineProperty缺陷？业务代码里面怎么处理？$set原理？vue 是怎么重写数组方法的？考察你是不是真的看过源码"></a>vue 2.x <code>defineProperty缺陷</code>？业务代码里面怎么处理？<code>$set</code>原理？vue 是怎么<code>重写数组方法</code>的？考察你是不是真的看过源码</h4></li><li><h4 id="vue-3-0-proxy优缺点？怎么处理-vue3-不支持-IE？"><a href="#vue-3-0-proxy优缺点？怎么处理-vue3-不支持-IE？" class="headerlink" title="vue 3.0 proxy优缺点？怎么处理 vue3 不支持 IE？"></a>vue 3.0 <code>proxy</code>优缺点？怎么处理 vue3 不支持 IE？</h4></li><li><h4 id="computed-和-watch-的区别和运用的场景？除了基本的，看你能不能说出三种watcher的区别"><a href="#computed-和-watch-的区别和运用的场景？除了基本的，看你能不能说出三种watcher的区别" class="headerlink" title="computed 和 watch 的区别和运用的场景？除了基本的，看你能不能说出三种watcher的区别"></a><code>computed</code> 和 <code>watch</code> 的区别和运用的场景？除了基本的，看你能不能说出<code>三种watcher</code>的区别</h4></li></ol><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ol><li><h4 id="生命周期详细描述一下？官方为什么改变？"><a href="#生命周期详细描述一下？官方为什么改变？" class="headerlink" title="生命周期详细描述一下？官方为什么改变？"></a><code>生命周期</code>详细描述一下？官方为什么<code>改变</code>？</h4></li><li><h4 id="redux三大原则"><a href="#redux三大原则" class="headerlink" title="redux三大原则"></a>redux三大原则</h4><p><strong>单一数据流</strong></p><p>​    整个应用的 state 被储存在 <strong>一棵 object tree</strong> 中，并且这个 object tree 只存在于 <strong>唯一一个 store</strong> 中。</p><h5 id="State-是只读的"><a href="#State-是只读的" class="headerlink" title="State 是只读的"></a>State 是只读的</h5><p>​    唯一改变 state 的方法就是触发 action。</p><p><strong>使用纯函数来修改state</strong></p><p>​    为了描述 action 如何改变 state tree ，你需要编写reducers。</p></li><li><h4 id="说说你对虚拟DOM的理解？直接全量更新和-diff-哪个快（这个问题要分情况）？"><a href="#说说你对虚拟DOM的理解？直接全量更新和-diff-哪个快（这个问题要分情况）？" class="headerlink" title="说说你对虚拟DOM的理解？直接全量更新和 diff 哪个快（这个问题要分情况）？"></a>说说你对<code>虚拟DOM</code>的理解？直接全量更新和 diff 哪个快（这个问题要<code>分情况</code>）？</h4></li><li><h4 id="什么是HOC？React-里面用过哪些？可能让你实现一个add-1-2-3-的函数"><a href="#什么是HOC？React-里面用过哪些？可能让你实现一个add-1-2-3-的函数" class="headerlink" title="什么是HOC？React 里面用过哪些？可能让你实现一个add(1)(2)(3)的函数"></a>什么是<code>HOC</code>？React 里面用过哪些？可能让你实现一个<code>add(1)(2)(3)</code>的函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">b</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)&#123;<br>            <span class="hljs-keyword">return</span> a+b+c;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>))<span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure></li><li><h4 id="Fiber干了什么事情？requestIdleCallback了解多少？"><a href="#Fiber干了什么事情？requestIdleCallback了解多少？" class="headerlink" title="Fiber干了什么事情？requestIdleCallback了解多少？"></a><code>Fiber</code>干了什么事情？<code>requestIdleCallback</code>了解多少？</h4></li><li><h4 id="react性能优化？"><a href="#react性能优化？" class="headerlink" title="react性能优化？"></a><code>react</code>性能优化？</h4><p>懒加载</p><p>shouldComponentUpdate避免重复渲染</p><p>组件尽可能的进行拆分、解耦</p><p>不要滥用props</p><p>列表类组件优化，加key</p><p>ReactDOMServer进行服务端渲染组件，为了用户会更快速地看到完整渲染的页面，可以采用服务端渲染技术</p><p>参见：<a href="https://segmentfault.com/a/1190000016259872">https://segmentfault.com/a/1190000016259872</a></p></li><li><h4 id="react合成事件"><a href="#react合成事件" class="headerlink" title="react合成事件"></a>react合成事件</h4><p>React提供了一种“顶层注册，事件收集，统一触发”的事件机制。所谓“顶层注册”，其实是在root元素上绑定一个统一的事件处理函数。“事件收集”指的是事件触发时构造合成事件对象.“统一触发”发生在收集过程之后，对所收集的事件逐一执行，并共享同一个合成事件对象。</p><p>合成事件可以跨浏览器兼容，但是不建议和原生事件混合使用，因为原生事件阻止冒泡会阻止所有的冒泡到document上，从而导致react合成事件无法注册。</p></li><li><h4 id="hooks出现的意义？类组件和函数组件之间的区别是什么？"><a href="#hooks出现的意义？类组件和函数组件之间的区别是什么？" class="headerlink" title="hooks出现的意义？类组件和函数组件之间的区别是什么？"></a><code>hooks</code>出现的意义？<code>类组件</code>和<code>函数组件</code>之间的区别是什么？</h4><p>hooks 可以让我们在函数组件中使用 state 和副作用，也可以做一些优化。自定义 hook 还可以把公共逻辑抽离。</p><p><strong>类组件和函数组件的区别</strong></p><p>函数组件是纯函数，没有生命周期和 state，不能写副作用</p><table><thead><tr><th align="left">区别</th><th align="left">函数组件</th><th align="left">类组件</th></tr></thead><tbody><tr><td align="left">是否有 <code>this</code></td><td align="left">没有</td><td align="left">有</td></tr><tr><td align="left">是否有生命周期</td><td align="left">没有</td><td align="left">有</td></tr><tr><td align="left">是否有状态 <code>state</code></td><td align="left">没有</td><td align="left">有</td></tr></tbody></table></li><li><h4 id="为什么不要在循环、条件语句或者嵌套函数中调用hooks？记住官网的一句话，Not-Magic-just-Arrays"><a href="#为什么不要在循环、条件语句或者嵌套函数中调用hooks？记住官网的一句话，Not-Magic-just-Arrays" class="headerlink" title="为什么不要在循环、条件语句或者嵌套函数中调用hooks？记住官网的一句话，Not Magic, just Arrays"></a>为什么<code>不要在</code>循环、条件语句或者嵌套函数中<code>调用hooks</code>？记住官网的一句话，<code>Not Magic, just Arrays</code></h4><ul><li>不要在循环，条件或嵌套函数中调用 Hook，必须始终在 React 函数的顶层使用 Hook。这是因为 React 需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用 Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。</li><li>只能在 React 函数式组件或自定义 Hook 中使用 Hook。</li></ul></li><li><h4 id="setState-同步还是异步？比较常问，问的可能也比较深入"><a href="#setState-同步还是异步？比较常问，问的可能也比较深入" class="headerlink" title="setState 同步还是异步？比较常问，问的可能也比较深入"></a>setState <code>同步</code>还是<code>异步</code>？比较常问，问的可能也比较深入</h4></li></ol><p>   在合成事件和钩子函数中为异步，在 settimeout 和原生事件中为同步</p><ol start="11"><li><h4 id="如何避免组件的重新渲染？memo-useMemo、PureComponent？useMemo-和-useCallback-区别？"><a href="#如何避免组件的重新渲染？memo-useMemo、PureComponent？useMemo-和-useCallback-区别？" class="headerlink" title="如何避免组件的重新渲染？memo/useMemo、PureComponent？useMemo 和 useCallback 区别？"></a>如何避免组件的<code>重新渲染</code>？memo/useMemo、PureComponent？useMemo 和 useCallback 区别？</h4></li></ol><p>   usememo 可以避免重新渲染，usecallback 可以避免函数重新渲染。</p><ol start="11"><li><h3 id="React-diff"><a href="#React-diff" class="headerlink" title="React diff"></a>React diff</h3><h4 id="diff-的三种策略"><a href="#diff-的三种策略" class="headerlink" title="diff 的三种策略"></a>diff 的三种策略</h4><p>1 Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。 tree diff<br>2 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。 component diff<br>3 对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。 element diff</p><p>以上三个策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。</p><p><strong>tree diff</strong>:对树进行分层比较，两棵树只会对同一层次的节点进行比较。同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。如果出现 dom 节点跨层级的移动操作，因为该节点已经不在原来的 dom 树层， 所以会直接删除该节点，</p><p><strong>component diff</strong>:如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。如下图，当 component D 改变为 component G 时，即使这两个 component 结构相似，一旦 React 判断 D 和 G 是不同类型的组件，就不会比较二者的结构，而是直接删除 component D，重新创建 component G 以及其子节点。</p><p><img src="https://github.com/PH2498/PH2498.github.io/blob/master/img/test/QQ%E6%88%AA%E5%9B%BE20210402095752.png?raw=true" alt="img"></p><p><strong>element dif</strong>:当节点处于同一层级时，React diff 提供了三种节点操作，分别为：INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高阶函数</title>
    <link href="/2022/05/30/%E7%90%86%E8%A7%A3%20JavaScript%20%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <url>/2022/05/30/%E7%90%86%E8%A7%A3%20JavaScript%20%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="理解-JavaScript-中的高阶函数"><a href="#理解-JavaScript-中的高阶函数" class="headerlink" title="理解 JavaScript 中的高阶函数"></a>理解 JavaScript 中的高阶函数</h1><p>本文将让大家了解什么是高阶函数以及如何在 JavaScript 中使用它们。 它虽然听起来很复杂，但其实并不难。</p><p>使 JavaScript 适合函数式编程的原因是它接受高阶函数。</p><p>高阶函数在 JavaScript 中广泛使用。 如果你已经用 JavaScript 编程了一段时间，你可能已经在不知不觉中用过它们了。</p><p><strong>什么是函数式编程</strong></p><p>在大多数简单的术语中，函数式是一种编程形式，你可以将函数作为参数传递给其他函数，并将它们作为值返回。 在函数式编程中，我们以函数的形式思考和编程。</p><p><strong>高阶函数</strong></p><p>高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。</p><p>简而言之，高阶函数是一个可以接收函数作为参数，甚至返回一个函数的函数。 它就像常规函数一样，只是多了接收和返回其他函数的附加能力，即参数和输出。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深入理解umi+dav</title>
    <link href="/2022/05/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3umi+dav/"/>
    <url>/2022/05/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3umi+dav/</url>
    
    <content type="html"><![CDATA[<h1 id="深入理解-umi-dav"><a href="#深入理解-umi-dav" class="headerlink" title="深入理解 umi+dav"></a>深入理解 umi+dav</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>依赖</strong>：dva</p><p>​ umi</p><p>​ npm i dva -D 下载 dva</p><p><strong>配置：</strong></p><p>​ .umirc.ts 文件中引入 dva</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">dva</span>: &#123;&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="创建-dva-仓库"><a href="#创建-dva-仓库" class="headerlink" title="创建 dva 仓库"></a>创建 dva 仓库</h2><p><strong>创建仓库文件夹</strong></p><p>​ 在 src 下创建 models 文件夹将所有仓库放入</p><p><img src="https://github.com/PH2498/PH2498.github.io/blob/master/img/%E6%B7%B1%E5%85%A5dva/QQ%E6%88%AA%E5%9B%BE20210405232306.png?raw=true" alt="image-20210405232227041"></p><p><strong>dva 仓库模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">//状态</span><br>    <span class="hljs-attr">roomList</span>: [],<br>  &#125;,<br><br>  <span class="hljs-attr">effects</span>: &#123;<br>    <span class="hljs-comment">//异步</span><br>    <span class="hljs-comment">/* *GET_ROOM_LIST(action, &#123; call, put &#125;) &#123;</span><br><span class="hljs-comment">      const res = yield call(api.getList, action.payload) //第一个参数是接口，第二个参数是前端传入的参数</span><br><span class="hljs-comment">      if (res.code === 200) &#123;//如果请求成功</span><br><span class="hljs-comment">        yield put(&#123; type: &#x27;setRoomList&#x27;, data: res.data &#125;)//调用方法并设置</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;, */</span><br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-comment">//请求成功设置状态</span><br>    <span class="hljs-comment">/* setRoomList(state, action) &#123;</span><br><span class="hljs-comment">      state.roomList = action.data</span><br><span class="hljs-comment">      return state // 必须有返回值</span><br><span class="hljs-comment">    &#125;,*/</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>页面中引用</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dva&#x27;</span> <span class="hljs-comment">//引入dva</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">index</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = (<span class="hljs-params">state</span>) =&gt; (&#123;<br>  <span class="hljs-comment">//将仓库中的数据挂载到props上</span><br>  ...state,<br>&#125;)<br><br><span class="hljs-keyword">const</span> mapDispatchToProps = &#123;<br>  <span class="hljs-comment">//调用设置仓库状态的方法</span><br>  <span class="hljs-comment">//仓库的那个方法，不设置命名空间默认为文件名，传入的参数</span><br>  <span class="hljs-attr">setRoomList</span>: <span class="hljs-function">(<span class="hljs-params">payload: <span class="hljs-built_in">any</span></span>) =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Home/setRoomList&#x27;</span>, payload &#125;),<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapStateToProps, mapDispatchToProps)(index)<br></code></pre></td></tr></table></figure><h2 id="案例一（同步存取数据）"><a href="#案例一（同步存取数据）" class="headerlink" title="案例一（同步存取数据）"></a>案例一（同步存取数据）</h2><p><strong>dva 仓库</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">roomList</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>  &#125;, <span class="hljs-comment">// 初始状态：缓存或空数组</span><br><br>  <span class="hljs-attr">effects</span>: &#123;<br>    <span class="hljs-comment">//异步</span><br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-title function_">setRoomList</span>(<span class="hljs-params">state, action</span>) &#123;<br>      <span class="hljs-comment">//将传入的新状态拼接</span><br>      state.<span class="hljs-property">roomList</span> = state.<span class="hljs-property">roomList</span>.<span class="hljs-title function_">concat</span>(action.<span class="hljs-property">payload</span>)<br>      <span class="hljs-keyword">return</span> state<br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dva&#x27;</span> <span class="hljs-comment">//引入dva</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">index</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          props.setRoomList([7, 6, 5])</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        设置</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      //调用下面的方法传入参数</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          console.log(props.Home, props)</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        点击</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = (<span class="hljs-params">state</span>) =&gt; (&#123;<br>  <span class="hljs-comment">//状态挂载到props</span><br>  ...state,<br>&#125;)<br><br><span class="hljs-keyword">const</span> mapDispatchToProps = &#123;<br>  <span class="hljs-comment">//设置dva状态</span><br>  <span class="hljs-attr">setRoomList</span>: <span class="hljs-function">(<span class="hljs-params">payload: any</span>) =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Home/setRoomList&#x27;</span>, payload &#125;),<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapStateToProps, mapDispatchToProps)(index)<br></code></pre></td></tr></table></figure><h2 id="案例二（请求接口）"><a href="#案例二（请求接口）" class="headerlink" title="案例二（请求接口）"></a>案例二（请求接口）</h2><p><strong>dva 仓库</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;api文件&#x27;</span> <span class="hljs-comment">//引入api</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-comment">//状态</span><br>    <span class="hljs-attr">roomList</span>: [],<br>  &#125;,<br><br>  <span class="hljs-attr">effects</span>: &#123;<br>    <span class="hljs-comment">//异步</span><br>    *<span class="hljs-title function_">GET_ROOM_LIST</span>(<span class="hljs-params">action, &#123; call, put &#125;</span>) &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">call</span>(api.<span class="hljs-property">getList</span>, action.<span class="hljs-property">payload</span>) <span class="hljs-comment">//第一个参数是接口，第二个参数是前端传入的参数</span><br>      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-comment">//如果请求成功</span><br>        <span class="hljs-keyword">yield</span> <span class="hljs-title function_">put</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;setRoomList&#x27;</span>, <span class="hljs-attr">data</span>: res.<span class="hljs-property">data</span> &#125;) <span class="hljs-comment">//调用方法并设置</span><br>      &#125;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-comment">//请求成功设置状态</span><br>    <span class="hljs-title function_">setRoomList</span>(<span class="hljs-params">state, action</span>) &#123;<br>      state.<span class="hljs-property">roomList</span> = action.<span class="hljs-property">data</span> <span class="hljs-comment">//设置新状态</span><br>      <span class="hljs-keyword">return</span> state <span class="hljs-comment">// 必须有返回值</span><br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>组件</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dva&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TabList</span>(<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> [nameType, setNameType] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;getInformation&#x27;</span>) <span class="hljs-comment">//接口的参数</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 首次调用接口</span><br>    props.<span class="hljs-title function_">GET_INFORMATION_LIST</span>(nameType)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;tab_list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = (<span class="hljs-params">state: <span class="hljs-built_in">any</span></span>) =&gt; (&#123;<br>  ...state,<br>&#125;)<br><br><span class="hljs-keyword">const</span> actionCreater = &#123;<br>  <span class="hljs-attr">GET_INFORMATION_LIST</span>: <span class="hljs-function">(<span class="hljs-params">payload: <span class="hljs-built_in">any</span></span>) =&gt;</span> (&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;information/GET_INFORMATION_LIST&#x27;</span>,<br>    payload,<br>  &#125;),<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapStateToProps, actionCreater)(<span class="hljs-title class_">TabList</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端手写原理</title>
    <link href="/2022/05/30/%E4%B8%AD%E7%BA%A7%20%E5%89%8D%E7%AB%AF%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/"/>
    <url>/2022/05/30/%E4%B8%AD%E7%BA%A7%20%E5%89%8D%E7%AB%AF%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="中级-前端手写原理"><a href="#中级-前端手写原理" class="headerlink" title="中级 前端手写原理"></a>中级 前端手写原理</h1><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h3 id="1-使用"><a href="#1-使用" class="headerlink" title="1.使用"></a>1.使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Promise</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./promise&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>  <span class="hljs-title function_">resolve</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">scuess</span>=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;wcgl&quot;</span>)<br>    &#125;,<span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data,<span class="hljs-string">&quot;成功&quot;</span>)<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err,<span class="hljs-string">&quot;失败&quot;</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="2-手写"><a href="#2-手写" class="headerlink" title="2.手写"></a>2.手写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PENDING</span>=<span class="hljs-string">&quot;PENDING&quot;</span>;<span class="hljs-comment">//状态</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RESOLVE</span>=<span class="hljs-string">&quot;RESOLVE&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REJECT</span>=<span class="hljs-string">&quot;REJECT&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resolvePromise</span>=(<span class="hljs-params">x,resolve,reject</span>)=&gt;&#123;<span class="hljs-comment">//链式调用</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> x==<span class="hljs-string">&quot;object&quot;</span>&amp;&amp;x!==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//判断第二个是否为函数</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> x.<span class="hljs-property">then</span>==<span class="hljs-string">&quot;function&quot;</span>)&#123;<br>      x.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<span class="hljs-comment">//执行then方法</span><br>        <span class="hljs-title function_">resolve</span>(data)<br>      &#125;,<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>        <span class="hljs-title function_">reject</span>(err)<br>      &#125;)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-title function_">resolve</span>(x)<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">resolve</span>(x)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Promise</span>&#123;<span class="hljs-comment">//promise</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">ext</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-variable constant_">PENDING</span>;<span class="hljs-comment">//初始状态为等待</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>=<span class="hljs-literal">undefined</span>;<span class="hljs-comment">//成功回调的值</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>=<span class="hljs-literal">undefined</span>;<span class="hljs-comment">//失败回调的值</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolveCallbacks</span>=[];<span class="hljs-comment">//链式调用数组（成功）</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectCallbacks</span>=[];<span class="hljs-comment">//失败</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">resolve</span>=(<span class="hljs-params">value</span>)=&gt;&#123;<span class="hljs-comment">//成功的回调</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>==<span class="hljs-variable constant_">PENDING</span>)&#123;<span class="hljs-comment">//不可逆性，必须是等待状态</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-variable constant_">RESOLVE</span>;<span class="hljs-comment">//修改状态</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>=value;<span class="hljs-comment">//修改成功状态的值</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolveCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span>=&gt;</span><span class="hljs-title function_">fn</span>());<span class="hljs-comment">//遍历所有成功回调</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">reject</span>=(<span class="hljs-params">response</span>)=&gt;&#123;<span class="hljs-comment">//失败的回调</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>==<span class="hljs-variable constant_">PENDING</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-variable constant_">REJECT</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>=response;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span>=&gt;</span><span class="hljs-title function_">fn</span>())<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">try</span>&#123;<span class="hljs-comment">//处理报错</span><br>      <span class="hljs-title function_">ext</span>(resolve,reject)<br>    &#125;<span class="hljs-keyword">catch</span>(error)&#123;<br>      <span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">onresolve,onreject</span>)&#123;<span class="hljs-comment">//then方法接受两个函数</span><br>    <span class="hljs-keyword">let</span> promise2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<span class="hljs-comment">//返回一个新的promise</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>==<span class="hljs-variable constant_">RESOLVE</span>)&#123;<span class="hljs-comment">//状态为成功</span><br>        <span class="hljs-keyword">let</span> x=<span class="hljs-title function_">onresolve</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<span class="hljs-comment">//执行成功回调</span><br>        <span class="hljs-title function_">resolvePromise</span>(x,resolve,reject)<span class="hljs-comment">//链式调用</span><br>      &#125;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>==<span class="hljs-variable constant_">REJECT</span>)&#123;<span class="hljs-comment">//状态为失败</span><br>        <span class="hljs-keyword">let</span> x=<span class="hljs-title function_">onreject</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>)<span class="hljs-comment">//执行失败回调</span><br>        <span class="hljs-title function_">resolvePromise</span>(x,resolve,reject)<br>      &#125;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>==<span class="hljs-variable constant_">PENDING</span>)&#123;<span class="hljs-comment">//状态为等待</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolveCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-comment">//将回调转入成功的数组</span><br>          <span class="hljs-keyword">let</span> x=<span class="hljs-title function_">onresolve</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<span class="hljs-comment">//执行回调</span><br>          <span class="hljs-title function_">resolvePromise</span>(x,resolve,reject)<br>        &#125;)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>          <span class="hljs-keyword">let</span> x=<span class="hljs-title function_">onreject</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>);<br>          <span class="hljs-title function_">resolvePromise</span>(x,resolve,reject)<br>        &#125;)<br>      &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> promise2<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-title class_">Promise</span><span class="hljs-comment">//抛出</span><br></code></pre></td></tr></table></figure><h2 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h2><h3 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1.防抖"></a>1.防抖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, wait = <span class="hljs-number">50</span></span>) &#123;<br>      <span class="hljs-keyword">let</span> timer;<span class="hljs-comment">//定时器</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<span class="hljs-comment">//清除定时器</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">//开启新的定时器</span><br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        &#125;, wait)<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">realFunc</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-title function_">debounce</span>(realFunc), <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h3 id="2-节流"><a href="#2-节流" class="headerlink" title="2.节流"></a>2.节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">jieliu</span>(<span class="hljs-params">fn, wait</span>) &#123;<br>      <span class="hljs-keyword">let</span> prev = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//上一个时间戳</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//当前时间戳</span><br>        <span class="hljs-keyword">if</span>(now - prev &gt; wait) &#123;<span class="hljs-comment">//判断时间段</span><br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">arguments</span>);<br>          prev = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<span class="hljs-comment">//更新 上一个时间戳</span><br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-防抖加节流"><a href="#3-防抖加节流" class="headerlink" title="3.防抖加节流"></a>3.防抖加节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">and</span>(<span class="hljs-params">fn, wait, pendding</span>) &#123;<span class="hljs-comment">//函数，时间，状态</span><br>      <span class="hljs-keyword">let</span> timer;<span class="hljs-comment">//用于防抖</span><br>      <span class="hljs-keyword">let</span> lastCall = <span class="hljs-number">0</span>;<span class="hljs-comment">//用于 节流</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(pendding) &#123;<span class="hljs-comment">//判断状态</span><br>          <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer);<br>          timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>          &#125;, wait)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>          <span class="hljs-keyword">if</span>(now - lastCall &lt; wait) &#123;<br>            <span class="hljs-keyword">return</span><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            lastCall = now;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Taro多端开发</title>
    <link href="/2022/05/30/Taro%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/05/30/Taro%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Taro学习"><a href="#Taro学习" class="headerlink" title="Taro学习"></a>Taro学习</h1><h2 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h2><p>在react生命周期的基础上添加了两个小程序的生命周期</p><ul><li>componentwillmount     挂载之前</li><li>componentdidmount     挂载之后</li><li>render                                渲染</li><li>shouldcomponentupdata(nextprops,nextstate)  //是否更新（可做优化）</li><li>componentwillReceiveProps(nextprops)  父子通信的参数发生变化触发</li><li>componentwillupdata    更新前</li><li>componentdidupdata    更新后</li><li>componentWillUnmount 卸载</li><li>componentdidshow       页面显示时触发</li><li>componentdidhiden       页面隐藏时触发</li></ul><p>setstate进行修改状态触发:shouldcomponentupdata、componentwillupdata、componentdidupdata、render</p><h2 id="2-组件传值props"><a href="#2-组件传值props" class="headerlink" title="2.组件传值props"></a>2.组件传值props</h2><p>子组件可以设置默认值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">children</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br><span class="hljs-comment">//这是个子组件</span><br>&#125;<br>children.<span class="hljs-property">defaultProps</span>=&#123;<br><span class="hljs-comment">//父组件传值设置默认值</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：父组件通过自定义属性传递函数时必须以on开头，否则小程序端会报错</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>    <span class="hljs-title function_">btn</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//向子组件传递的函数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>    &#125;<br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">children</span> <span class="hljs-attr">onfun</span>=<span class="hljs-string">&#123;this.btn&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">children</span>&gt;</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-路由功能"><a href="#3-路由功能" class="headerlink" title="3.路由功能"></a>3.路由功能</h2><h3 id="跳转（常用）"><a href="#跳转（常用）" class="headerlink" title="跳转（常用）"></a>跳转（常用）</h3><ol><li><p>// 跳转到目的页面，打开新页面(最多进行5次跳转)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">navigateTo</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/page/path/name&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>// 跳转到目的页面，在当前页面打开（不会保存到历史记录栈）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">redirectTo</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/page/path/name&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h3 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">navigateTo</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/page/path/name?id=2&amp;type=test&#x27;</span><span class="hljs-comment">//问号拼接参数</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="引用静态资源"><a href="#引用静态资源" class="headerlink" title="引用静态资源"></a>引用静态资源</h3><p><strong>图片：</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Image</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><span class="hljs-comment">//引入图片</span><br><span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//第一种</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;require(</span>&#x27;路径&#x27;)&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span><br>    <span class="hljs-comment">//第二种在全局作用域通过import引入</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;img&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>css：</strong></p><p>​    直接通过import引入，<strong>注意单位用px会自动转化为rem、PX默认还是px</strong></p><p>​    样式一般用类选择器，没有标签、群组、ID、祖先选择器</p><p>​    每个组件的样式只在当前组件生效，组件的样式互不影响</p><p>​    全局样式不在自定义组件中生效</p><p>​    最好使用flex布局</p><h2 id="4-组件嵌套（插槽）"><a href="#4-组件嵌套（插槽）" class="headerlink" title="4.组件嵌套（插槽）"></a>4.组件嵌套（插槽）</h2><p>组件嵌套使用this.props.children,<strong>注意不可以对this.props.children做任何操作</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//Father父组件</span><br><span class="hljs-comment">//第一种，嵌套单个（类似于匿名插槽）</span><br>&lt;<span class="hljs-title class_">Father</span>&gt;<span class="hljs-comment">//传入了一个组件</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;....&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Father</span>/&gt;</span></span><br><span class="hljs-comment">//Father内部</span><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">      &#123;this.props.children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>    &#125;<br><span class="hljs-comment">//第二种，嵌套多个（类似于具名插槽），利用自定义属性</span><br> &lt;<span class="hljs-title class_">Father</span> myImg=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;....&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span>&#125;&gt;<span class="hljs-comment">//传入了一个组件</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>我是一段介绍<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Father</span>/&gt;</span></span><br><span class="hljs-comment">//Father内部</span><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">             &#123;this.props.myImg&#125;//通过自定义属性传入的图片</span><br><span class="language-xml">             &#123;this.props.children&#125;//传入的标题 </span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="5-环境变量（当前端）"><a href="#5-环境变量（当前端）" class="headerlink" title="5.环境变量（当前端）"></a>5.环境变量（当前端）</h2><p>使用process.env.TARO_ENV可以识别当前在那个端,可以做一些特别的操作，例如在不同端引入不同的css样式表；</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//运行 npm run dev:h5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">TARO_ENV</span>)<span class="hljs-comment">//h5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Egg.js学习</title>
    <link href="/2022/05/08/egg.js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/08/egg.js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="egg-js学习"><a href="#egg-js学习" class="headerlink" title="egg.js学习"></a>egg.js学习</h1><h2 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h2><h3 id="1-脚手架及配置"><a href="#1-脚手架及配置" class="headerlink" title="1.脚手架及配置"></a>1.脚手架及配置</h3><p>​    官网：<a href="https://www.eggjs.org/">https://www.eggjs.org/</a></p><p>​    安装命令    </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> npm init egg <span class="hljs-literal">--type</span>=simple<br><span class="hljs-variable">$</span> npm i<br><span class="hljs-variable">$</span> npm run dev<br></code></pre></td></tr></table></figure><p>​    配置注意项：post请求会有csrf安全拦截需要在config.default.js中关闭</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">config.<span class="hljs-property">security</span> = &#123;<br>    <span class="hljs-attr">csrf</span>: &#123;<br>      <span class="hljs-attr">enable</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  &#125;;<br></code></pre></td></tr></table></figure><p>一些插件：</p><p>​    egg-validate：检验前端传入的参数类型</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs txt">//npm i egg-validate  安装<br><br>//plugin.js中配置插件<br>exports.validate = &#123;<br>  enable: true,<br>  package: &#x27;egg-validate&#x27;,<br>&#125;;<br><br><br>//controller使用<br>const rule = &#123;<br>name: &#123; type: &quot;string&quot; &#125;,<br>age: &#123; type: &quot;number&quot; &#125;<br>&#125;<br>ctx.validate(rule)<br></code></pre></td></tr></table></figure><h3 id="2-controller-控制器"><a href="#2-controller-控制器" class="headerlink" title="2.controller(控制器)"></a>2.controller(控制器)</h3><p>​    控制器需要和路由配合使用，路由相当于控制器的入口</p><p>​    命名规范：文件名小写（home.js）、声明的class需要大驼峰+Controller(HomeController)</p><p>​    controller模版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Controller</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).<span class="hljs-property">Controller</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Controller</span> &#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-variable language_">this</span>;<br>    ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;hi, egg&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">HomeController</span>;<br></code></pre></td></tr></table></figure><p>请求传参：</p><p>​    get(querystring传参/问号传参)：ctx.query||ctx.queries;</p><p>​    get(动态传参/斜杠冒号传参)：ctx.params;</p><p>​    post|put|del(传参一致)：ctx.request.body</p><h3 id="3-service"><a href="#3-service" class="headerlink" title="3.service"></a>3.service</h3><p>​    安装依赖 egg-view-ejs</p><p>​    在plugin文件里启用模版引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.<span class="hljs-property">ejs</span>=&#123;<br>  <span class="hljs-attr">enable</span>:<span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">package</span>:<span class="hljs-string">&#x27;egg-view-ejs&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​    命名规则与控制器一致：文件名小写（home.js）、声明的class需要大驼峰      +Controller(HomeService)</p><p>  模版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Service</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;egg&quot;</span>).<span class="hljs-property">Service</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Service</span>&#123;<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br><span class="hljs-comment">//返回数据</span><br>    &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-title class_">UserService</span>;<br><br><span class="hljs-comment">//在contriller中使用(异步需要加await)</span><br><span class="hljs-keyword">const</span> res= <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">index</span>();<br></code></pre></td></tr></table></figure><h3 id="4-egg模版引擎及静态资源"><a href="#4-egg模版引擎及静态资源" class="headerlink" title="4.egg模版引擎及静态资源"></a>4.egg模版引擎及静态资源</h3><p>controller中使用ctx.render()函数渲染。有三个参数（文件名：默认为view文件夹下；数据参数；ejs配置：特殊字符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">await</span> ctx.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;user.html&#x27;</span>,&#123;<br>     <span class="hljs-attr">id</span>:<span class="hljs-number">100</span>,<br>     <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;admin&quot;</span>,<br>     <span class="hljs-attr">list</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>   &#125;,&#123;<br>     <span class="hljs-attr">delimiter</span>:<span class="hljs-string">&quot;%&quot;</span><span class="hljs-comment">//通过delimiter可将要渲染的文件局部采用某个特殊字符</span><br>   &#125;)<br></code></pre></td></tr></table></figure><p>​    ejs模版使用方法：</p><p>​            ejs注释为尖括号喝特殊字符家井号 默认特殊字符为百分号</p><p>​            ejs展示为尖括号和特殊字符包裹js代码 默认特殊字符为百分号</p><p>​            只展示变量时需要加等于号</p><p>​            ejs想要书写一下js代码不需要加等于号 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- ejs注释为尖括号喝特殊字符家井号 默认特殊字符为百分号（案例如下） --&gt;<br>    &lt;%# 这里是注释 %&gt;<br>    &lt;!-- ejs展示为尖括号和特殊字符包裹js代码 默认特殊字符为百分号--&gt;<br>    &lt;!-- 只展示变量时需要加等于号 （案例如下）--&gt;<br>    &lt;h1&gt;user模版&lt;/h1&gt;<br>    &lt;h2&gt;id: &lt;%= id%&gt;&lt;/h2&gt;<br>    &lt;h2&gt;name: &lt;%= name%&gt;&lt;/h2&gt;<br>    &lt;!-- ejs想要书写一下代码不需要加等于号 （案例如下） --&gt;<br>    &lt;%for(let i=0;i&lt;list.length;i++)&#123;%&gt;<br>       &lt;p&gt;&lt;%= list[i]%&gt;&lt;/p&gt;<br>    &lt;%&#125;%&gt;<br></code></pre></td></tr></table></figure><p>Config.default.js下模版引擎的相关配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>)<br><span class="hljs-comment">//配置模版引擎</span><br>config.<span class="hljs-property">view</span> = &#123;<br>  <span class="hljs-attr">mapping</span>: &#123;<br>    <span class="hljs-string">&quot;.html&quot;</span>: <span class="hljs-string">&quot;ejs&quot;</span><span class="hljs-comment">//将html启用ejs模版</span><br>  &#125;,<br>  <span class="hljs-attr">root</span>:path.<span class="hljs-title function_">join</span>(appInfo.<span class="hljs-property">baseDir</span>,<span class="hljs-string">&quot;app/html&quot;</span>)<span class="hljs-comment">//修改模版文件的存放路径（默认为app/view）</span><br>  <span class="hljs-comment">//也可以配置多个文件夹（如下）</span><br>  <span class="hljs-attr">root</span>:[<br>    path.<span class="hljs-title function_">join</span>(appInfo.<span class="hljs-property">baseDir</span>,<span class="hljs-string">&#x27;app/view&#x27;</span>),<br>    path.<span class="hljs-title function_">join</span>(appInfo.<span class="hljs-property">baseDir</span>,<span class="hljs-string">&#x27;app/其他文件夹&#x27;</span>),<br>  ].<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>)<br>&#125;<br>config.<span class="hljs-property">ejs</span> = &#123;<br>  <span class="hljs-attr">delimiter</span>: <span class="hljs-string">&quot;$&quot;</span> <span class="hljs-comment">//配置全局的ejs特殊字符（默认为%）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>模版引擎与静态资源</p><p>​    静态资源默认存放在app/public文件夹下，可以在config, default.js中配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config/config.default.js</span><br>config.<span class="hljs-property">static</span>=&#123;<br><span class="hljs-attr">prefix</span>:<span class="hljs-string">&quot;public&quot;</span>,  <span class="hljs-comment">//prefix可配置静态资源存放的路径（url的路径）</span><br><span class="hljs-attr">dir</span>:path.<span class="hljs-title function_">join</span>(appInfo.<span class="hljs-property">baseDir</span>,<span class="hljs-string">&quot;app/public&quot;</span>) <span class="hljs-comment">//dir可配置文件在项目中存放的路径</span><br>&#125;<br></code></pre></td></tr></table></figure><p>![image-20220509222001492](/Users/haopeixian/Library/Application Support/typora-user-images/image-20220509222001492.png)</p><p>![image-20220509222159923](/Users/haopeixian/Library/Application Support/typora-user-images/image-20220509222159923.png)</p><h3 id="5-cookies的使用"><a href="#5-cookies的使用" class="headerlink" title="5.cookies的使用"></a>5.cookies的使用</h3><p>​    1.egg中使用ctx来操作cookeis</p><p>​        设置：ctx.cookies.set(“name”,”value”,”option”)</p><p>​            value不能直接设置中文，如需设置中文则需要加密（可在option中配置，也可将中文转base64），加密存储的cookie读取时需要解密；</p><p>​        清空某个cookies只需要将value设为null eg:cx.cookies.set(“name”,null)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//设置cookies</span><br>ctx.<span class="hljs-property">cookies</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data), &#123;<br>            <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//只允许后端操作（默认为true）</span><br>            <span class="hljs-attr">maxAge</span>:<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>  <span class="hljs-comment">//过期时间</span><br> &#125;);<br> <br> <span class="hljs-comment">//存储value为中文的cookies</span><br> <span class="hljs-comment">//1.设置option参数为加密</span><br>         ctx.<span class="hljs-property">cookies</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;zh&#x27;</span>,<span class="hljs-string">&#x27;中文&#x27;</span>,&#123;<br>            <span class="hljs-attr">encrypt</span>:<span class="hljs-literal">true</span><br>        &#125;)<br>        <br> <span class="hljs-comment">//2.转base64</span><br> <span class="hljs-comment">//写个base64转换的函数</span><br>     <span class="hljs-title function_">encode</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-comment">//base64加密</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(str).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;base64&quot;</span>)<br>    &#125;<br>    <span class="hljs-title function_">decode</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-comment">//base64解密</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(str,<span class="hljs-string">&quot;base64&quot;</span>).<span class="hljs-title function_">toString</span>();<br>    &#125;<br>  ctx.<span class="hljs-property">cookies</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">encode</span>(<span class="hljs-string">&quot;中文&quot;</span>))<br></code></pre></td></tr></table></figure><p>​    读取：</p><p>​        ctx.cookies.get(“name”)   如果option参数配置了加密则  ctx.cookies.get(“name”,{encrypt:true})</p><h3 id="6-session"><a href="#6-session" class="headerlink" title="6.session"></a>6.session</h3><p>![image-20220510222454731](/Users/haopeixian/Library/Application Support/typora-user-images/image-20220510222454731.png)</p><p>session可以直接设置中文</p><p>设置值：ctx.session.名称=值</p><p>获取值：ctx.session.名称</p><p>清除值：ctx.session.名称=null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//session配置</span><br><span class="hljs-comment">//config.default.js</span><br>config.<span class="hljs-property">session</span>=&#123;<br><span class="hljs-attr">key</span>:<span class="hljs-string">&quot;sesson的名称&quot;</span>,<br><span class="hljs-attr">httpOnly</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//是否只允许服务端操作</span><br>maxAge：<span class="hljs-number">1000</span>,<span class="hljs-comment">//过期时间</span><br><span class="hljs-attr">renew</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//自动刷新session  访问页面时就会自动刷新</span><br>&#125;<br></code></pre></td></tr></table></figure><p>封装session文件存储session这样可以节省浏览器中session所占空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-function"><span class="hljs-params">app</span>=&gt;</span>&#123;<br><span class="hljs-keyword">const</span> store=&#123;&#125;;<br>app.<span class="hljs-property">session</span>=&#123;<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">key</span>)&#123;<br><span class="hljs-keyword">return</span> store[key]<br>&#125;,<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">key,value,maxAge</span>)&#123;<br>store[key]=value;<br>&#125;,<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">destory</span>(<span class="hljs-params">key</span>)&#123;<br>tore[key]=<span class="hljs-literal">null</span>;<br>&#125;,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="1-中间件（middleware）"><a href="#1-中间件（middleware）" class="headerlink" title="1.中间件（middleware）"></a>1.中间件（middleware）</h3><p>放置目录：app/middleware；</p><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config/cofingdefault.js</span><br><span class="hljs-comment">//挂载全局中间件。    </span><br>config.<span class="hljs-property">middleware</span> = [<span class="hljs-string">&quot;m1&quot;</span>];<span class="hljs-comment">//挂载中间件文件名m1</span><br><span class="hljs-comment">//可以对中间件个性化定制</span><br>config.<span class="hljs-property">m1</span>=&#123;<br><span class="hljs-attr">type</span>:<span class="hljs-string">&quot;传递参数&quot;</span>  <span class="hljs-comment">//该参数将传递于m1中间件</span><br>&#125;<br></code></pre></td></tr></table></figure><p>中间件模版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-function">(<span class="hljs-params">options</span>)=&gt;</span>&#123;<br><span class="hljs-comment">//options接受config配置的个性化参数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (ctx,next)=&gt;&#123;<br>    <span class="hljs-comment">//ctx上下文、next函数。只有执行next函数才会继续向下执行代码</span><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>小试牛刀（通过中间件实现http请求日志）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moment =<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;moment&quot;</span>);<br><span class="hljs-keyword">const</span> fs=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-function">(<span class="hljs-params">options</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (ctx,next)=&gt;&#123;<br>        <span class="hljs-comment">//请求进入时间</span><br>        <span class="hljs-keyword">const</span> sTime=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-keyword">const</span> joinhttpTime=<span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//请求信息</span><br>        <span class="hljs-keyword">const</span> req=ctx.<span class="hljs-property">request</span>;<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>        <span class="hljs-comment">//获取请求信息</span><br>        <span class="hljs-keyword">const</span> log=&#123;<br>            <span class="hljs-attr">method</span>:req.<span class="hljs-property">method</span>,<br>            <span class="hljs-attr">url</span>:req.<span class="hljs-property">url</span>,<br>            <span class="hljs-attr">data</span>:req.<span class="hljs-property">body</span>,<br>            joinhttpTime,<br>            <span class="hljs-attr">endTime</span>:<span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>),<br>            <span class="hljs-attr">timeLength</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()-sTime<br>        &#125;;<br>        <span class="hljs-comment">//要写入的数据</span><br>        <span class="hljs-keyword">const</span> data=<span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>)+<span class="hljs-string">&quot;[httplog]&quot;</span>+<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(log)+<span class="hljs-string">&quot;\r\n&quot;</span><br>        <span class="hljs-comment">//通过fs模块写入文件</span><br>        fs.<span class="hljs-title function_">appendFileSync</span>(ctx.<span class="hljs-property">app</span>.<span class="hljs-property">baseDir</span>+<span class="hljs-string">&#x27;/httpLog.log&#x27;</span>,data)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-框架扩展（ctx、app、request、response、hlper）"><a href="#2-框架扩展（ctx、app、request、response、hlper）" class="headerlink" title="2.框架扩展（ctx、app、request、response、hlper）"></a>2.框架扩展（ctx、app、request、response、hlper）</h3><p>框架扩展文件统一保存路径 src/extend/…….</p><ul><li><p>application扩展<br>路径：src/extend/application.js<br>返回：对象<br>使用方法：controller中解构于this.app<br>牛刀小试：实现app获取package.js文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app/extend/application.js</span><br><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-comment">//扩展读取package.json方法</span><br>    <span class="hljs-title function_">package</span>(<span class="hljs-params">key</span>)&#123;<br>        <span class="hljs-keyword">const</span> gpack=<span class="hljs-title function_">getPackage</span>();<br>        <span class="hljs-keyword">return</span> key?gpack[key]:gpack; <br>    &#125;,<br>    <span class="hljs-comment">//扩展读取package.json属性 在函数前加上get关键字即为属性</span><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">allPackage</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getPackage</span>();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//封装函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPackage</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//获取package.js的路径</span><br>    <span class="hljs-keyword">const</span> filePath=path.<span class="hljs-title function_">join</span>(process.<span class="hljs-title function_">cwd</span>(),<span class="hljs-string">&quot;package.json&quot;</span>);<br>    <span class="hljs-keyword">const</span> packageInfo=<span class="hljs-built_in">require</span>(filePath);<br>    <span class="hljs-keyword">return</span> packageInfo;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//contorller文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Controller</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;egg&quot;</span>).<span class="hljs-property">Controller</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">packController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Controller</span> &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title class_">Index</span>() &#123;<br>        <span class="hljs-keyword">const</span> &#123; app, ctx &#125; = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-comment">//调用扩展的方法</span><br>        <span class="hljs-keyword">const</span> getPack=app.<span class="hljs-title function_">package</span>(<span class="hljs-string">&quot;scripts&quot;</span>);<br>        <span class="hljs-comment">//调用扩展的属性</span><br>        <span class="hljs-keyword">const</span> getKey=app.<span class="hljs-property">allPackage</span>;<br>        <span class="hljs-comment">// console.log(getPack,&quot;方法&quot;)</span><br>        <span class="hljs-comment">// console.log(getKey,&quot;属性&quot;)</span><br>        ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;package&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = packController<br></code></pre></td></tr></table></figure></li><li><p>context上下文扩展</p><p>路径：src/extend/context.js<br>返回：对象<br>使用方法：controller中解构于this.ctx<br>牛刀小试：拓展ctx的获取请求参数方法（扩展属性于上面的appcation一致需要在函数前面加个get）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app/extend/context.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-comment">//扩展获取请求参数方法</span><br>    <span class="hljs-title function_">params</span>(<span class="hljs-params">key</span>)&#123;<br>        <span class="hljs-comment">//获取当前请求方式    this同controller中的this;</span><br>        <span class="hljs-keyword">const</span> method=<span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-property">method</span>;<br>        <span class="hljs-comment">//判断方法返回不同的参数</span><br>        <span class="hljs-keyword">if</span>(method==<span class="hljs-string">&quot;GET&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> key?<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>[key]:<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> key?<span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>[key]:<span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-property">body</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//controller中使用</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> &#123;app,ctx&#125;=<span class="hljs-variable language_">this</span>;<br>        <span class="hljs-comment">//获取拓展方法</span><br>        <span class="hljs-keyword">const</span> getFn=ctx.<span class="hljs-title function_">params</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(getFn,<span class="hljs-string">&#x27;getfn&#x27;</span>);<br>        ctx.<span class="hljs-property">body</span>=<span class="hljs-string">&quot;context&quot;</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>request扩展</p><p>路径：src/extend/request.js<br>返回：对象<br>使用方法：controller中解构于ctx.request<br>牛刀小试：拓展获取请求头token方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app/extend/request.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">token</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">header</span>.<span class="hljs-property">token</span>||<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;token&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//controller中使用</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">request</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> &#123;ctx,app&#125;=<span class="hljs-variable language_">this</span>;<br>        ctx.<span class="hljs-property">body</span>=ctx.<span class="hljs-property">request</span>.<span class="hljs-property">token</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>response扩展</p><p>路径：src/extend/response.js<br>返回：对象<br>使用方法：controller中解构于ctx.response<br>牛刀小试：拓展设置响应头token方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app/extend/response.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">token</span>(<span class="hljs-params">token</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;token&quot;</span>,token)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//controller中使用</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">responseR</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> &#123;ctx,app&#125;=<span class="hljs-variable language_">this</span>;<br>        ctx.<span class="hljs-property">response</span>.<span class="hljs-property">token</span>=<span class="hljs-string">&quot;abc&quot;</span><br>        ctx.<span class="hljs-property">body</span>=<span class="hljs-string">&quot;reponsasdase&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>helper扩展</p><p>路径：src/extend/helper.js<br>返回：对象<br>使用方法：controller中解构于ctx.helper<br>牛刀小试：拓展转base64编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app/extend/helper.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-title function_">codeBase64</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(str).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;base64&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//controller中使用</span><br>ctx.<span class="hljs-property">body</span>=ctx.<span class="hljs-property">helper</span>.<span class="hljs-title function_">codeBase64</span>(<span class="hljs-string">&quot;123123&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-插件机制"><a href="#3-插件机制" class="headerlink" title="3.插件机制"></a>3.插件机制</h3><p>插件没有router、controller</p><p>路径：src/lib/plugin/要封装的插件名（egg-XXX）</p><p>目录结构</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">-lib<br>--plugin<br>---egg-XXX(封装的插件)<br>----app<br>-----middleware<br>-----package.json(插件描述文件)<br></code></pre></td></tr></table></figure><p>Package.json事例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;egg-auth&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//插件的名称，只是描述</span><br>    <span class="hljs-attr">&quot;eggPlugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auth&quot;</span><span class="hljs-comment">//使用时的插件名，使用时真正的名称</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>牛刀小试：封装鉴别登陆插件</p><p>思路：通过中间件拦截请求判断session中是否已登陆，同时需要添加白名单接口（无需登录的接口）</p><p>lib/plugin/egg-auth.   所需middleware、package.json、项目的app.js配置使用插件</p><p>package.json编写</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//. lib/plugin/egg-auth/package.json</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;egg-auth&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//插件名</span><br>    <span class="hljs-attr">&quot;eggPlugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auth&quot;</span><span class="hljs-comment">//使用时的插件名</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>中间件编写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//. lib/plugin/egg-auth/middleware/auth.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">export</span>=<span class="hljs-function"><span class="hljs-params">option</span>=&gt;</span>&#123;<br>  <span class="hljs-comment">//option接收项目中config.default.js文件配置的参数</span><br><span class="hljs-keyword">return</span> <span class="hljs-title function_">async</span>(ctx,next)=&gt;&#123;<br>    <span class="hljs-comment">//获取接口url</span><br><span class="hljs-keyword">const</span> url=ctx.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>;<br>    <span class="hljs-comment">//获取session中的登陆参数</span><br>    <span class="hljs-keyword">const</span> url=ctx.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>;<br>    <span class="hljs-comment">//为获取到登陆参数并且不包含在白名单中(验证是否存在白名单需要纯url所以要去掉参数)</span><br>    <span class="hljs-keyword">if</span>(!url&amp;&amp;!option.<span class="hljs-property">exclude</span>.<span class="hljs-title function_">includes</span>(ctx.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>)[<span class="hljs-number">0</span>]))&#123;<br>      ctx.<span class="hljs-property">body</span>=&#123;<br>        <span class="hljs-attr">status</span>:<span class="hljs-number">1001</span>,<br>        <span class="hljs-attr">errMsg</span>:<span class="hljs-string">&quot;未登录&quot;</span><br>      &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//已登陆放行</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目目录下的app.js编写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//项目目录/app.js(手动创建)</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-function"><span class="hljs-params">app</span>=&gt;</span>&#123;<br>  <span class="hljs-comment">//为app添加插件的中间件</span><br>  app.<span class="hljs-property">config</span>.<span class="hljs-property">coreMiddleware</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;auth&quot;</span>) <span class="hljs-comment">//此处的auth即为自定义插件package.json中的eggPlugin插件名</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在项目的config/plugin中启用封装的插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config/plugin.js</span><br><span class="hljs-comment">//与下载的依赖不同，需要path来确定插件的路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">auth</span>=&#123;<span class="hljs-comment">//此处的auth即为自定义插件package.json中的eggPlugin插件名</span><br><span class="hljs-attr">enable</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-title function_">path</span>(__dirname,<span class="hljs-string">&quot;../lib/plugin/egg-auth&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//正常下载的插件事例(路径参数为package及依赖包名称)</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">validate</span> = &#123;<br>  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">package</span>: <span class="hljs-string">&#x27;egg-validate&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>配置插件检验路由的白名单(在项目的config/config.default.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config/config.default.js</span><br>config.<span class="hljs-property">auth</span>=&#123;<span class="hljs-comment">//此处的auth即为自定义插件package.json中的eggPlugin插件名</span><br> <span class="hljs-comment">//传入一个exclude的数组（白名单数组）</span><br>    <span class="hljs-attr">exclude</span>:[<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>]<span class="hljs-comment">//middleware的option参数接收</span><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="1-基础数据库操作"><a href="#1-基础数据库操作" class="headerlink" title="1.基础数据库操作"></a>1.基础数据库操作</h3><table><thead><tr><th align="center">操作</th><th>sql</th></tr></thead><tbody><tr><td align="center">登陆数据库</td><td>mysql -uroot -p;</td></tr><tr><td align="center">查看数据库</td><td>show databases;</td></tr><tr><td align="center">创建数据库</td><td>create database 库名;</td></tr><tr><td align="center">删除数据库</td><td>drop database 库名;</td></tr><tr><td align="center">使用库</td><td>use 库名;</td></tr><tr><td align="center">查看表</td><td>show tables;</td></tr><tr><td align="center">查看表结构</td><td>desc 表名称;</td></tr><tr><td align="center">删除表</td><td>drop table 表名;</td></tr></tbody></table><p>2.创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>使用某个数据库<br>use 库名<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>字段名 长度 不为<span class="hljs-keyword">null</span> 自增<br>id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>字段名 长度 不为<span class="hljs-keyword">null</span> 默认值 注释<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;admin&#x27;</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>字段名 长度 不为<span class="hljs-keyword">null</span> 注释<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>主键为id<br><span class="hljs-keyword">primary</span> key(id)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>InnoDb引擎 utf8编码<br>)engine<span class="hljs-operator">=</span>InnoDB charset<span class="hljs-operator">=</span>utfb;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>案例<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;admin&#x27;</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br><span class="hljs-keyword">primary</span> key(id)<br>)engine<span class="hljs-operator">=</span>InnoDB charset<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入表数据(在<span class="hljs-keyword">user</span>表中添加值)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;user1&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">or</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(name,pwd) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;user2&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>);<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询表数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询<span class="hljs-keyword">user</span>中所有值<br><span class="hljs-keyword">select</span> id, name <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询<span class="hljs-keyword">user</span>中所有值展示id和name<br><span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询<span class="hljs-keyword">user</span>表中id为<span class="hljs-number">1</span>的数据并展示id和name<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改表数据<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> pwd<span class="hljs-operator">=</span><span class="hljs-string">&#x27;aaaa&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>在<span class="hljs-keyword">user</span>表中将id为<span class="hljs-number">1</span>的数据的pwd字段设为aaaa<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除表数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">user</span>表中删除id为<span class="hljs-number">1</span>的数据<br></code></pre></td></tr></table></figure><h3 id="2-egg中的mysql插件"><a href="#2-egg中的mysql插件" class="headerlink" title="2.egg中的mysql插件"></a>2.egg中的mysql插件</h3><p>Egg-mysql<br>安装 npm i egg-mysql</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs txt">npm i --save egg-mysql //安装<br>// config/plugin.js（开启插件）<br>exports.mysql = &#123;<br>  enable: true,<br>  package: &#x27;egg-mysql&#x27;,<br>&#125;;<br><br>//链接数据库config.default.js<br>  config.mysql = &#123;<br>    app: true,//挂载到app<br>    agent:false,<br>    client:&#123;//数据库信息配置<br>      host:&#x27;127.0.0.1&#x27;,<br>      port:&quot;3306&quot;,<br>      user:&quot;root&quot;,<br>      password:&quot;Ph249855&quot;,<br>      database:&quot;egg&quot;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
